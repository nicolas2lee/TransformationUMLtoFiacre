package generateFiacreMain;

import com.sodius.mdw.metamodel.rhapsody.*;

public ruleset toFiacre(in model : rhapsody, out fiacreModel : fiacreMM) {

	public rule setVar(v :rhapsody.Attribute){
		var variable : fiacreMM.Variable = fiacreModel.create("Variable");
		variable.Name = v.name;
		variable.initVal = v.defaultValue;
		var dType : fiacreMM.DataType= fiacreModel.create("DataType");	
		dType.Name=v.type.name;	
		variable.datatype= dType;
		return variable;
	}

	public rule setPort(pt : rhapsody.Port){
		var port : fiacreMM.Port = fiacreModel.create("Port");
		port.Name = pt.name;
		return port;
	}

	public rule getGenFiacreCode(t : rhapsody.Transition, p : rhapsody.Instance){
		foreach(p.otherClass.statechart.interfaceitems){
			
		}
	}

	public rule setTGA(t : rhapsody.Transition, tF :fiacreMM.Transition, p : rhapsody.Instance){
		var trigger : fiacreMM.Trigger = fiacreModel.create("Trigger");
		var guard : fiacreMM.Guard = fiacreModel.create("Guard");
		var action : fiacreMM.Action = fiacreModel.create("Action");
		trigger.Name = t.trigger.name;
		if (t.trigger.operation.arguments != null){
			foreach (arg in t.trigger.operation.arguments){
				var variable : fiacreMM.Variable = fiacreModel.create("Variable");	
				var VarType : fiacreMM.DataType = fiacreModel.create("DataType");				
				variable.Name = arg.name;
				VarType.Name = arg.type.name;
				variable.datatype = VarType;
				trigger.arguments.add(variable);
			}
		}
		System.out.println("---"+trigger.arguments+"---");
		guard.Name = t.guard.name;
		action.Name = t.action.name;
		
		trigger.Body = t.trigger.body;
		guard.Body = t.guard.body;
		action.Body = t.action.body;
		
		//trigger.codeFiacre = t.trigger.description;
		//guard.codeFiacre = t.guard.description;
		action.codeFiacre = t.action.description;
				
		tF.trigger = trigger;
		tF.guard = guard;
		tF.action = action;
		
	}

	public rule setTransition(t : rhapsody.Transition, p : rhapsody.Instance) {
		//System.out.println("test");
		var Transition : fiacreMM.Transition = fiacreModel.create("Transition");	
		Transition.Name = t.name;
		if (t.source.name != "ROOT") {
			var srcState : fiacreMM.State = fiacreModel.create( "State" );
			var trgState : fiacreMM.State = fiacreModel.create( "State" );
			srcState.name = t.source.name;
			trgState.name = t.target.name;
			
			Transition.source = srcState;
			Transition.target = trgState;
			@setTGA(t,Transition,p);
			//System.out.println("===================="+@setTGA(inTransition)+"============");
			
		}
		//stateF.inTransitions.add (inTransition);
		
		return Transition;
	}
	
	public rule setState( s :rhapsody.State, p : rhapsody.Instance){
		var stateF : fiacreMM.State = fiacreModel.create( "State" );
		stateF.Name = s.name;
		foreach (tin in s.inTransitions){					
			stateF.inTransitions.add (@setTransition(tin,p));
		}
		
		foreach (tout in s.outTransitions){
			stateF.outTransitions.add (@setTransition(tout,p));
		}
		
		//process.states.add(stateF);
		return stateF;
	}
	
	
	public rule setProcess ( p : rhapsody.Instance){
		var pF : fiacreMM.Process = fiacreModel.create("Process");
		pF.Name = p.otherClass.name;
		System.out.println("====================="+p.otherClass.statechart.rootState.defaultTransition.target.metaClass+"=====================");
		
		foreach( element in p.otherClass.statechart.references[0].elementsInDiagram){
			if (element.metaClass == "State" && element.name != "ROOT" ){	
				pF.states.add(@setState(element, p));
				pF.StateSize= pF.StateSize+1;
			}
		}
		
		foreach ( t in p.otherClass.statechart.references[0].elementsInDiagram){
			if (t.metaClass == "Transition" ){
				pF.transitions.add(@setTransition(t));
			}
		}
		
		if (p.otherClass.ports != null ){
			foreach ( port in p.otherClass.ports){	
				pF.ports.add(@setPort(port));
			}
		}
		
		foreach (s in pF.states){
			if (s.Name == p.otherClass.statechart.rootState.defaultTransition.target.name)
				pF.initState= s;
		}
		
		foreach( v in p.otherClass.attributes){
			pF.variables.add(@setVar(v));
			pF.VarSize = pF.VarSize +1;
		}
		
		return pF;
	}
	
	//component = object diagram
	public rule setComponent (c :rhapsody.ObjectModelDiagram ){
		var ComponentF : fiacreMM.Component = fiacreModel.create("Component");
		ComponentF.Name = c.name;
		
		foreach(element in c.elementsInDiagram){
			//System.out.println("====================="+element.metaClass+"=====================");
			if (element.metaClass == "Object" ){
				ComponentF.instances.add(@setProcess(element));	
				ComponentF.ProcessSize=ComponentF.ProcessSize+1;
			}
		}
		// to do need to add variables =into component
		System.out.println(ComponentF.instances);
		return ComponentF;
	}
	
	entry rule main() {
	
		var proj = model.getInstances("Project");
		var program : fiacreMM.Program = fiacreModel.create( "Program" );
		var appliPackages = proj.packages;
		
		foreach ( aPack in  appliPackages ) {
			
			if ( aPack.name == "Ascenseur" ) {
				program.Name = aPack.name;
				System.out.println("Nom de Paquetage : " + program  );
									
				foreach( aComp in aPack.objectModelDiagrams){
					
					if (aComp.stereotype.name != "Class Diagram"){
						System.out.println(aComp.stereotype);
						program.components.add(@setComponent(aComp));
						program.ComponentSize=program.ComponentSize+1;
						System.out.println("-----++"+aComp+"++-----");
					}
				}
			$generateFiacre(program);
			
			}
		}
	}
}