
type Button_exEvents is union
	
		| Pressed
	
		| arrive
		| tm(5)
end

			type toButton_ex is queue 2 of Button_exEvents
type ControllerSysEvents is union
	
		| receiveFromButton_Ex
	
		| detected
		| continueToMove
	
		| braked
	
		| receiveFloorAndCloseDoor
		| 
	
		| readyToOpenDoor
		| doneTask
	
		| receiveCabinMoved
		| gotoOpenDoorDirectly
	
		| readyToOpenDoor
	
		| receiveCabinMoved
		| gotoOpenDoorDirectly
	
		| readyToGo
end

			type toControllerSys is queue 2 of ControllerSysEvents
type WinchEvents is union
	
		| goUp
		| goDown
	
		| stopFromController
	
		| stopFromController
	
		| stop
end

			type toWinch is queue 2 of WinchEvents
type CabinEvents is union
	
		| sendFloorAndCloseDoor
		| moveCabinDown
		| moveCabinUp
	
		| braked
	
		| moveCabinDown
		| moveCabinUp
	
		| braked
end

			type toCabin is queue 2 of CabinEvents
type DoorEvents is union
	
		| CloseDoor
	
		| 
	
		| OpenDoor
end

			type toDoor is queue 2 of DoorEvents
type SensorEvents is union
	
		| toMeasure
	
		| cabinArrived
		| toMeasure
	
		| tm(1)
end

			type toSensor is queue 2 of SensorEvents
type SensorEvents is union
	
		| toMeasure
	
		| cabinArrived
		| toMeasure
	
		| tm(1)
end

			type toSensor is queue 2 of SensorEvents
type SensorEvents is union
	
		| toMeasure
	
		| cabinArrived
		| toMeasure
	
		| tm(1)
end

			type toSensor is queue 2 of SensorEvents
type SensorEvents is union
	
		| toMeasure
	
		| cabinArrived
		| toMeasure
	
		| tm(1)
end

			type toSensor is queue 2 of SensorEvents
type SensorEvents is union
	
		| toMeasure
	
		| cabinArrived
		| toMeasure
	
		| tm(1)
end

			type toSensor is queue 2 of SensorEvents
	
type Button_exEvents is union
	
		| Pressed
	
		| arrive
		| tm(5)
end

		type toButton_ex is queue 2 of Button_exEvents
type ControllerSysEvents is union
	
		| receiveFromButton_Ex
	
		| detected
		| continueToMove
	
		| braked
	
		| receiveFloorAndCloseDoor
		| 
	
		| readyToOpenDoor
		| doneTask
	
		| receiveCabinMoved
		| gotoOpenDoorDirectly
	
		| readyToOpenDoor
	
		| receiveCabinMoved
		| gotoOpenDoorDirectly
	
		| readyToGo
end

		type toControllerSys is queue 2 of ControllerSysEvents
type WinchEvents is union
	
		| goUp
		| goDown
	
		| stopFromController
	
		| stopFromController
	
		| stop
end

		type toWinch is queue 2 of WinchEvents
type CabinEvents is union
	
		| sendFloorAndCloseDoor
		| moveCabinDown
		| moveCabinUp
	
		| braked
	
		| moveCabinDown
		| moveCabinUp
	
		| braked
end

		type toCabin is queue 2 of CabinEvents
type DoorEvents is union
	
		| CloseDoor
	
		| 
	
		| OpenDoor
end

		type toDoor is queue 2 of DoorEvents
type SensorEvents is union
	
		| toMeasure
	
		| cabinArrived
		| toMeasure
	
		| tm(1)
end

		type toSensor is queue 2 of SensorEvents
type SensorEvents is union
	
		| toMeasure
	
		| cabinArrived
		| toMeasure
	
		| tm(1)
end

		type toSensor is queue 2 of SensorEvents
type SensorEvents is union
	
		| toMeasure
	
		| cabinArrived
		| toMeasure
	
		| tm(1)
end

		type toSensor is queue 2 of SensorEvents
type SensorEvents is union
	
		| toMeasure
	
		| cabinArrived
		| toMeasure
	
		| tm(1)
end

		type toSensor is queue 2 of SensorEvents
type SensorEvents is union
	
		| toMeasure
	
		| cabinArrived
		| toMeasure
	
		| tm(1)
end

		type toSensor is queue 2 of SensorEvents
	
	/*process*/
	Process Button_ex [
					&requestFloor : int,
]

 (
					&requestFloor : int,
		)

	is
		states 
			Off,
			On
	init
		toButton_ex := ;
		to Off

	from Off
		output ! requestFloor;
		to On
	from On
		
		to Off
		
		to Off

	Process ControllerSys [
					&requestedTargetFloor : int,
					&requestedFloor : int,
]

 (
					&requestedTargetFloor : int,
					&requestedFloor : int,
		)

	is
		states 
			Wait,
			cabinMoved,
			cabinArrived,
			doorOpened,
			doorClosed,
			receiveRequestFromButtonEx,
			cabinBraked,
			recievedRequestFromCabin,
			waitDoorClosed
		var 
			toControllerSys,
			exBtnFloor,
			currentFloor,
			isBusy,
			upordown,
			targetFloor,
			destFloor
			loadedPassager
	init
		toControllerSys := ;
		exBtnFloor := -1;
		currentFloor := 0;
		isBusy := false;
		upordown := 0;
		targetFloor := -1;
		destFloor := -1;
		loadedPassager := false;
		to Wait

	from Wait
		input ? exBtnFloor;     
destFloor := exBtnFloor;
if (currentFloor < exBtnFloor) then
	getP_con_win().gen(new goUp());   
	upordown := 1;  
	sendToMeasureSensor(exBtnFloor);
else
	if (currentFloor == exBtnFloor)  then      
		gen (new gotoOpenDoorDirectly());
	else
		getP_con_win().gen(new goDown()); 
		upordown := -1;  
		sendToMeasureSensor(exBtnFloor);
	end;
end;
		to receiveRequestFromButtonEx
	from cabinMoved
		
		to cabinArrived
		
		to cabinMoved
	from cabinArrived
		
		to cabinBraked
	from doorOpened
		
		to doorClosed
		
		to waitDoorClosed
	from doorClosed
		
		to recievedRequestFromCabin
		
		to Wait
	from receiveRequestFromButtonEx
		
		to cabinMoved
		
		to cabinBraked
	from cabinBraked
		
		to doorOpened
	from recievedRequestFromCabin
		
		to cabinMoved
		
		to cabinBraked
	from waitDoorClosed
		
		to doorClosed

	Process Winch [
]

 (
		)

	is
		states 
			Not_Going,
			Going_Up,
			Going_Down,
			receiveCabinBrakedFromControllerSys
		var 
			toWinch,
			motor,
			frein
			selector
	init
		toWinch := ;
		motor := ;
		frein := ;
		selector := ;
		to Not_Going

	from Not_Going
		getP_win_cab().gen(new moveCabinUp());
		to Going_Up
		
		to Going_Down
	from Going_Up
		
		to receiveCabinBrakedFromControllerSys
	from Going_Down
		
		to receiveCabinBrakedFromControllerSys
	from receiveCabinBrakedFromControllerSys
		
		to Not_Going

	Process Cabin [
					&targetFloor : int,
]

 (
					&targetFloor : int,
		)

	is
		states 
			Stop,
			Down,
			sentInfo,
			Up
		var 
			toCabin
			currentFloor
	init
		toCabin := ;
		currentFloor := 0;
		to Stop

	from Stop
		
		to sentInfo
		
		to Down
		
		to Up
	from Down
		
		to Stop
	from sentInfo
		
		to Down
		
		to Up
	from Up
		
		to Stop

	Process Door [
]

 (
		)

	is
		states 
			Open,
			Closed,
			Sleep
	init
		toDoor := ;
		to Sleep

	from Open
		
		to Closed
	from Closed
		
		to Sleep
	from Sleep
		
		to Open

	Process Sensor [
					&currentFloor : int,
					&sensorFloor : int,
					&currentFloor : int,
					&sensorFloor : int,
]

 (
					&currentFloor : int,
					&sensorFloor : int,
					&currentFloor : int,
					&sensorFloor : int,
		)

	is
		states 
			Idle,
			Detecting,
			Detected
		var 
			toSensor,
			floor
			cabinFloor
	init
		toSensor := ;
		floor := -1;
		cabinFloor := -1;
		to Idle

	from Idle
		
		to Detecting
	from Detecting
		
		to Detected
		
		to Detecting
	from Detected
		
		to Idle

	Process Sensor [
					&currentFloor : int,
					&sensorFloor : int,
					&currentFloor : int,
					&sensorFloor : int,
]

 (
					&currentFloor : int,
					&sensorFloor : int,
					&currentFloor : int,
					&sensorFloor : int,
		)

	is
		states 
			Idle,
			Detecting,
			Detected
		var 
			toSensor,
			floor
			cabinFloor
	init
		toSensor := ;
		floor := -1;
		cabinFloor := -1;
		to Idle

	from Idle
		
		to Detecting
	from Detecting
		
		to Detected
		
		to Detecting
	from Detected
		
		to Idle

	Process Sensor [
					&currentFloor : int,
					&sensorFloor : int,
					&currentFloor : int,
					&sensorFloor : int,
]

 (
					&currentFloor : int,
					&sensorFloor : int,
					&currentFloor : int,
					&sensorFloor : int,
		)

	is
		states 
			Idle,
			Detecting,
			Detected
		var 
			toSensor,
			floor
			cabinFloor
	init
		toSensor := ;
		floor := -1;
		cabinFloor := -1;
		to Idle

	from Idle
		
		to Detecting
	from Detecting
		
		to Detected
		
		to Detecting
	from Detected
		
		to Idle

	Process Sensor [
					&currentFloor : int,
					&sensorFloor : int,
					&currentFloor : int,
					&sensorFloor : int,
]

 (
					&currentFloor : int,
					&sensorFloor : int,
					&currentFloor : int,
					&sensorFloor : int,
		)

	is
		states 
			Idle,
			Detecting,
			Detected
		var 
			toSensor,
			floor
			cabinFloor
	init
		toSensor := ;
		floor := -1;
		cabinFloor := -1;
		to Idle

	from Idle
		
		to Detecting
	from Detecting
		
		to Detected
		
		to Detecting
	from Detected
		
		to Idle

	Process Sensor [
					&currentFloor : int,
					&sensorFloor : int,
					&currentFloor : int,
					&sensorFloor : int,
]

 (
					&currentFloor : int,
					&sensorFloor : int,
					&currentFloor : int,
					&sensorFloor : int,
		)

	is
		states 
			Idle,
			Detecting,
			Detected
		var 
			toSensor,
			floor
			cabinFloor
	init
		toSensor := ;
		floor := -1;
		cabinFloor := -1;
		to Idle

	from Idle
		
		to Detecting
	from Detecting
		
		to Detected
		
		to Detecting
	from Detected
		
		to Idle

	/*Component*/
	Component InstanceClsDiag is 
	par
	
	
			Button_ex,
			ControllerSys,
			Winch,
			Cabin,
			Door,
			Sensor,
			Sensor,
			Sensor,
			Sensor,
			Sensor
	

