
	/*process*/
	Process Button_ex 
	[]

 
	is
		states 
			Off_Button_ex,
			On_Button_ex
	init
		to 

	from Off_Button_ex
		Pressed;
          receiveFromButton_Ex ! requestFloor;

		to On
	from On_Button_ex
		select
          arrive;
		to Off
		[]
          wait[4,5];
end;
		to Off

	Process ControllerSys 
	[]

 
	is
		states 
			Wait_ControllerSys,
			cabinMoved_ControllerSys,
			cabinArrived_ControllerSys,
			doorOpened_ControllerSys,
			doorClosed_ControllerSys,
			receiveRequestFromButtonEx_ControllerSys,
			cabinBraked_ControllerSys,
			recievedRequestFromCabin_ControllerSys,
			waitDoorClosed_ControllerSys
		var 
			exBtnFloor,
			currentFloor,
			isBusy,
			upordown,
			targetFloor,
			destFloor,
			loadedPassager
	init
		exBtnFloor := -1;
		currentFloor := 0;
		isBusy := false;
		upordown := 0;
		targetFloor := -1;
		destFloor := -1;
		loadedPassager := false;
		to 

	from Wait_ControllerSys
		receiveFromButton_Ex
		to receiveRequestFromButtonEx
	from cabinMoved_ControllerSys
		detected 
		to cabinArrived
		continueToMove
		to cabinMoved
	from cabinArrived_ControllerSys
		braked
		to cabinBraked
	from doorOpened_ControllerSys
		 receiveFloorAndCloseDoor
		to doorClosed
		[loadedPassager]
		to waitDoorClosed
	from doorClosed_ControllerSys
		readyToGo    (s : doorClosed, t : recievedRequestFromCabin) 
		to recievedRequestFromCabin
		doneTask
		to Wait
	from receiveRequestFromButtonEx_ControllerSys
		receiveCabinMoved     (s: receiveRequestFromButtonEx, t: cabinMoved )
		to cabinMoved
		gotoOpenDoorDirectly  (s: receiveRequestFromButtonEx, t: cabinBraked)
		to cabinBraked
	from cabinBraked_ControllerSys
		readyToOpenDoor
		to doorOpened
	from recievedRequestFromCabin_ControllerSys
		receiveCabinMoved    (s: recievedRequestFromCabin, t: cabinMoved)
		to cabinMoved
		gotoOpenDoorDirectly    (s: recievedRequestFromCabin, t: cabinBraked )
		to cabinBraked
	from waitDoorClosed_ControllerSys
		readyToGo      (s: waitDoorClosed, t:  doorClosed)
		to doorClosed

	Process Winch 
	[]

 
	is
		states 
			Not_Going_Winch,
			Going_Up_Winch,
			Going_Down_Winch,
			receiveCabinBrakedFromControllerSys_Winch
		var 
			motor,
			frein,
			selector
	init
		motor := ;
		frein := ;
		selector := ;
		to 

	from Not_Going_Winch
		goUp;
          moveCabinUp;
		to Going_Up
		goDown;
moveCabinDown;
		to Going_Down
	from Going_Up_Winch
		stopFromController;
braked;
		to receiveCabinBrakedFromControllerSys
	from Going_Down_Winch
		stopFromController (s: Going_Down, t:  receiveCabinBrakedFromControllerSys)
		to receiveCabinBrakedFromControllerSys
	from receiveCabinBrakedFromControllerSys_Winch
		 stop;
readyToOpenDoor;
		to Not_Going

	Process Cabin 
	[]

 
	is
		states 
			Stop_Cabin,
			Down_Cabin,
			sentInfo_Cabin,
			Up_Cabin
		var 
			currentFloor
	init
		currentFloor := 0;
		to 

	from Stop_Cabin
		sendFloorAndCloseDoor  ?  targetFloor;
receiveFloorAndCloseDoor !  targetFloor;
		to sentInfo
		moveCabinDown;
P_cab_con_braked;
		to Down
		moveCabinUp;
receiveCabinMoved;


		to Up
	from Down_Cabin
		braked;
p_cab_con_braked;
		to Stop
	from sentInfo_Cabin
		moveCabinDown ;
p_cab_con_receiveCabinMoved;
		to Down
		moveCabinUp;
p_cab_con_receiveCabinMoved;
		to Up
	from Up_Cabin
		braked;
p_cab_con_braked;

		to Stop

	Process Door 
	[]

 
	is
		states 
			Open_Door,
			Closed_Door,
			Sleep_Door
	init
		to 

	from Open_Door
		CloseDoor;
		to Closed
	from Closed_Door
		readyToGo;
		to Sleep
	from Sleep_Door
		OpenDoor;

		to Open

	Process Sensor 
	[]

 
	is
		states 
			Idle_Sensor,
			Detecting_Sensor,
			Detected_Sensor
		var 
			floor,
			cabinFloor
	init
		floor := -1;
		cabinFloor := -1;
		to 

	from Idle_Sensor
		toMeasure ?  floor, cabinFloor;

		to Detecting
	from Detecting_Sensor
		cabinArrived;
		to Detected
		toMeasure ? cabinFloor;
          if (floor = cabinFloor) then 
            to Detected
          else
            continueToMove
          end
		to Detecting
	from Detected_Sensor
		wait[1,2];
		to Idle

	Process Sensor 
	[]

 
	is
		states 
			Idle_Sensor,
			Detecting_Sensor,
			Detected_Sensor
		var 
			floor,
			cabinFloor
	init
		floor := -1;
		cabinFloor := -1;
		to 

	from Idle_Sensor
		toMeasure ?  floor, cabinFloor;

		to Detecting
	from Detecting_Sensor
		cabinArrived;
		to Detected
		toMeasure ? cabinFloor;
          if (floor = cabinFloor) then 
            to Detected
          else
            continueToMove
          end
		to Detecting
	from Detected_Sensor
		wait[1,2];
		to Idle

	Process Sensor 
	[]

 
	is
		states 
			Idle_Sensor,
			Detecting_Sensor,
			Detected_Sensor
		var 
			floor,
			cabinFloor
	init
		floor := -1;
		cabinFloor := -1;
		to 

	from Idle_Sensor
		toMeasure ?  floor, cabinFloor;

		to Detecting
	from Detecting_Sensor
		cabinArrived;
		to Detected
		toMeasure ? cabinFloor;
          if (floor = cabinFloor) then 
            to Detected
          else
            continueToMove
          end
		to Detecting
	from Detected_Sensor
		wait[1,2];
		to Idle

	Process Sensor 
	[]

 
	is
		states 
			Idle_Sensor,
			Detecting_Sensor,
			Detected_Sensor
		var 
			floor,
			cabinFloor
	init
		floor := -1;
		cabinFloor := -1;
		to 

	from Idle_Sensor
		toMeasure ?  floor, cabinFloor;

		to Detecting
	from Detecting_Sensor
		cabinArrived;
		to Detected
		toMeasure ? cabinFloor;
          if (floor = cabinFloor) then 
            to Detected
          else
            continueToMove
          end
		to Detecting
	from Detected_Sensor
		wait[1,2];
		to Idle

	Process Sensor 
	[]

 
	is
		states 
			Idle_Sensor,
			Detecting_Sensor,
			Detected_Sensor
		var 
			floor,
			cabinFloor
	init
		floor := -1;
		cabinFloor := -1;
		to 

	from Idle_Sensor
		toMeasure ?  floor, cabinFloor;

		to Detecting
	from Detecting_Sensor
		cabinArrived;
		to Detected
		toMeasure ? cabinFloor;
          if (floor = cabinFloor) then 
            to Detected
          else
            continueToMove
          end
		to Detecting
	from Detected_Sensor
		wait[1,2];
		to Idle

	/*Component*/
	Component InstanceClsDiag is 
	par
	
	
			Button_ex,
			ControllerSys,
			Winch,
			Cabin,
			Door,
			Sensor,
			Sensor,
			Sensor,
			Sensor,
			Sensor
	

