
	/*process*/
	Process Button_ex[
		] (
					&requestFloor : int,
		)
		
		is
		states 

			Off,
			On
		init
			to Off
		
			from Off
				getP_btn_con().gen(new receiveFromButton_Ex(params.requestFloor));
				
				to On
			from On
				
				
				to Off
				
				
				to Off

	Process ControllerSys[
		] (
					&requestedTargetFloor : int,
					&requestedFloor : int,
		)
		
		is
		states 

			Wait,
			cabinMoved,
			cabinArrived,
			doorOpened,
			doorClosed,
			receiveRequestFromButtonEx,
			cabinBraked,
			recievedRequestFromCabin,
			waitDoorClosed
		var 

			exBtnFloor,
			currentFloor,
			isBusy,
			upordown,
			targetFloor,
			destFloor,
			loadedPassager
		init
			exBtnFloor := -1;
			currentFloor := 0;
			isBusy := false;
			upordown := 0;
			targetFloor := -1;
			destFloor := -1;
			loadedPassager := false;
			to Wait
		
			from Wait
				exBtnFloor=params.requestedFloor;       
destFloor=exBtnFloor;
if (currentFloor < exBtnFloor){
	getP_con_win().gen(new goUp());   
	upordown=1;  
	sendToMeasureSensor(exBtnFloor);
}else{
	if (currentFloor == exBtnFloor) {
		//open the door         
		gen (new gotoOpenDoorDirectly());
	}else{
		getP_con_win().gen(new goDown()); 
		upordown=-1;  
		sendToMeasureSensor(exBtnFloor);
	}
}
				
				to receiveRequestFromButtonEx
			from cabinMoved
				sendStopToWinch()
				
				to cabinArrived
				currentFloor+=upordown;   
sendToMeasureSensor(destFloor);
				
				to cabinMoved
			from cabinArrived
				sendToWinchToStop();
				
				to cabinBraked
			from doorOpened
				closeDoor();
targetFloor=params.requestedTargetFloor;    
destFloor=targetFloor;
				
				to doorClosed
				closeDoor();
				
				to waitDoorClosed
			from doorClosed
				if (currentFloor < targetFloor){
	getP_con_win().gen(new goUp());   
	upordown=1; 
	
	sendToMeasureSensor(targetFloor);
}else{
	if (currentFloor == targetFloor) {
		//open the door         
		gen (new gotoOpenDoorDirectly());
	}else{
		getP_con_win().gen(new goDown()); 
		upordown=-1;  
		
		sendToMeasureSensor(targetFloor);
	}
}
				
				to recievedRequestFromCabin
				loadedPassager=false;
				
				to Wait
			from receiveRequestFromButtonEx
				currentFloor+=upordown;   
sendToMeasureSensor(destFloor);  
/*try {
    Thread.sleep(1000);                 //1000 milliseconds is one second.
} catch(InterruptedException ex) {
    Thread.currentThread().interrupt();
}*/
				
				to cabinMoved
				System.out.println("ready to open"); 
gen (new readyToOpenDoor());
				
				to cabinBraked
			from cabinBraked
				 openDoor()
				
				to doorOpened
			from recievedRequestFromCabin
				currentFloor+=upordown;   
loadedPassager=true;        
sendToMeasureSensor(destFloor);
				
				to cabinMoved
				gen(new readyToOpenDoor());
				
				to cabinBraked
			from waitDoorClosed
				gen(new doneTask());
				
				to doorClosed

	Process Winch[
		] (
		)
		
		is
		states 

			Not_Going,
			Going_Up,
			Going_Down,
			receiveCabinBrakedFromControllerSys
		var 

			motor,
			frein,
			selector
		init
			motor := ;
			frein := ;
			selector := ;
			to Not_Going
		
			from Not_Going
				sendGoUpToCabin();
				
				to Going_Up
				sendGoDownToCabin();
				
				to Going_Down
			from Going_Up
				sendBrakeToCabin();
				
				to receiveCabinBrakedFromControllerSys
			from Going_Down
				sendBrakeToCabin();
				
				to receiveCabinBrakedFromControllerSys
			from receiveCabinBrakedFromControllerSys
				receiveStopFromController();
				
				to Not_Going

	Process Cabin[
		] (
					&targetFloor : int,
		)
		
		is
		states 

			Stop,
			Down,
			sentInfo,
			Up
		var 

			currentFloor
		init
			currentFloor := 0;
			to Stop
		
			from Stop
				getP_cab_con().gen (new receiveFloorAndCloseDoor(params.targetFloor));
				
				to sentInfo
				sendMovedDownToController();
				
				to Down
				sendMovedUpToController();
				
				to Up
			from Down
				sendCabinBrakedToController();
				
				to Stop
			from sentInfo
				sendMovedDownToController();
				
				to Down
				sendMovedUpToController();
				
				to Up
			from Up
				sendCabinBrakedToController();
				
				to Stop

	Process Door[
		] (
		)
		
		is
		states 

			Open,
			Closed,
			Sleep
		init
			to Sleep
		
			from Open
				
				
				to Closed
			from Closed
				goSleep();
				
				to Sleep
			from Sleep
				
				
				to Open

	Process Sensor[
		] (
					&currentFloor : int,
					&sensorFloor : int,
					&currentFloor : int,
					&sensorFloor : int,
		)
		
		is
		states 

			Idle,
			Detecting,
			Detected
		var 

			floor,
			cabinFloor
		init
			floor := -1;
			cabinFloor := -1;
			to Idle
		
			from Idle
				floor=params.sensorFloor;
cabinFloor=params.currentFloor;
				
				to Detecting
			from Detecting
				sendCabinArrived();
				
				to Detected
				cabinFloor=params.currentFloor; 
checkArrived();
				
				to Detecting
			from Detected
				
				
				to Idle

	Process Sensor[
		] (
					&currentFloor : int,
					&sensorFloor : int,
					&currentFloor : int,
					&sensorFloor : int,
		)
		
		is
		states 

			Idle,
			Detecting,
			Detected
		var 

			floor,
			cabinFloor
		init
			floor := -1;
			cabinFloor := -1;
			to Idle
		
			from Idle
				floor=params.sensorFloor;
cabinFloor=params.currentFloor;
				
				to Detecting
			from Detecting
				sendCabinArrived();
				
				to Detected
				cabinFloor=params.currentFloor; 
checkArrived();
				
				to Detecting
			from Detected
				
				
				to Idle

	Process Sensor[
		] (
					&currentFloor : int,
					&sensorFloor : int,
					&currentFloor : int,
					&sensorFloor : int,
		)
		
		is
		states 

			Idle,
			Detecting,
			Detected
		var 

			floor,
			cabinFloor
		init
			floor := -1;
			cabinFloor := -1;
			to Idle
		
			from Idle
				floor=params.sensorFloor;
cabinFloor=params.currentFloor;
				
				to Detecting
			from Detecting
				sendCabinArrived();
				
				to Detected
				cabinFloor=params.currentFloor; 
checkArrived();
				
				to Detecting
			from Detected
				
				
				to Idle

	Process Sensor[
		] (
					&currentFloor : int,
					&sensorFloor : int,
					&currentFloor : int,
					&sensorFloor : int,
		)
		
		is
		states 

			Idle,
			Detecting,
			Detected
		var 

			floor,
			cabinFloor
		init
			floor := -1;
			cabinFloor := -1;
			to Idle
		
			from Idle
				floor=params.sensorFloor;
cabinFloor=params.currentFloor;
				
				to Detecting
			from Detecting
				sendCabinArrived();
				
				to Detected
				cabinFloor=params.currentFloor; 
checkArrived();
				
				to Detecting
			from Detected
				
				
				to Idle

	Process Sensor[
		] (
					&currentFloor : int,
					&sensorFloor : int,
					&currentFloor : int,
					&sensorFloor : int,
		)
		
		is
		states 

			Idle,
			Detecting,
			Detected
		var 

			floor,
			cabinFloor
		init
			floor := -1;
			cabinFloor := -1;
			to Idle
		
			from Idle
				floor=params.sensorFloor;
cabinFloor=params.currentFloor;
				
				to Detecting
			from Detecting
				sendCabinArrived();
				
				to Detected
				cabinFloor=params.currentFloor; 
checkArrived();
				
				to Detecting
			from Detected
				
				
				to Idle

	/*Component*/
	Component InstanceClsDiag is 
	par
	
	

			Button_ex,
			ControllerSys,
			Winch,
			Cabin,
			Door,
			Sensor,
			Sensor,
			Sensor,
			Sensor,
			Sensor
	

