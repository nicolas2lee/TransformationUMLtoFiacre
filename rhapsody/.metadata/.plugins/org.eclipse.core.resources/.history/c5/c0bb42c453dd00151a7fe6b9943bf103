
	/*process*/
	Process Button_ex 
	[]

 
	is
		states 
			Off,
			On
	init
		to Off

	from Off
		Pressed;
          receiveFromButton_Ex ! requestFloor;

		to On
	from On
		select
          arrive;
		to Off
		[]
          wait[4,5];
		to Off

	Process ControllerSys 
	[]

 
	is
		states 
			Wait,
			cabinMoved,
			cabinArrived,
			doorOpened,
			doorClosed,
			receiveRequestFromButtonEx,
			cabinBraked,
			recievedRequestFromCabin,
			waitDoorClosed
		var 
			exBtnFloor,
			currentFloor,
			isBusy,
			upordown,
			targetFloor,
			destFloor,
			loadedPassager
	init
		exBtnFloor := -1;
		currentFloor := 0;
		isBusy := false;
		upordown := 0;
		targetFloor := -1;
		destFloor := -1;
		loadedPassager := false;
		to Wait

	from Wait
		receiveFromButton_Ex
		to receiveRequestFromButtonEx
	from cabinMoved
		detected 
		to cabinArrived
		continueToMove
		to cabinMoved
	from cabinArrived
		braked
		to cabinBraked
	from doorOpened
		 receiveFloorAndCloseDoor
		to doorClosed
		[loadedPassager]
		to waitDoorClosed
	from doorClosed
		readyToGo    (s : doorClosed, t : recievedRequestFromCabin) 
		to recievedRequestFromCabin
		doneTask
		to Wait
	from receiveRequestFromButtonEx
		receiveCabinMoved     (s: receiveRequestFromButtonEx, t: cabinMoved )
		to cabinMoved
		gotoOpenDoorDirectly  (s: receiveRequestFromButtonEx, t: cabinBraked)
		to cabinBraked
	from cabinBraked
		readyToOpenDoor
		to doorOpened
	from recievedRequestFromCabin
		receiveCabinMoved    (s: recievedRequestFromCabin, t: cabinMoved)
		to cabinMoved
		gotoOpenDoorDirectly    (s: recievedRequestFromCabin, t: cabinBraked )
		to cabinBraked
	from waitDoorClosed
		readyToGo      (s: waitDoorClosed, t:  doorClosed)
		to doorClosed

	Process Winch 
	[]

 
	is
		states 
			Not_Going,
			Going_Up,
			Going_Down,
			receiveCabinBrakedFromControllerSys
		var 
			motor,
			frein,
			selector
	init
		motor := ;
		frein := ;
		selector := ;
		to Not_Going

	from Not_Going
		goUp;
          moveCabinUp;
		to Going_Up
		goDown;
moveCabinDown;
		to Going_Down
	from Going_Up
		stopFromController;
braked;
		to receiveCabinBrakedFromControllerSys
	from Going_Down
		stopFromController (s: Going_Down, t:  receiveCabinBrakedFromControllerSys)
		to receiveCabinBrakedFromControllerSys
	from receiveCabinBrakedFromControllerSys
		 stop;
readyToOpenDoor;
		to Not_Going

	Process Cabin 
	[]

 
	is
		states 
			Stop,
			Down,
			sentInfo,
			Up
		var 
			currentFloor
	init
		currentFloor := 0;
		to Stop

	from Stop
		sendFloorAndCloseDoor 
		to sentInfo
		moveCabinDown    (s : Stop, t : Down)
		to Down
		moveCabinUp         (s : Stop, t : Up)
		to Up
	from Down
		braked
		to Stop
	from sentInfo
		moveCabinDown     (s : sentInfo, t : Down)
		to Down
		moveCabinUp    (s : sentInfo, t : Up)
		to Up
	from Up
		braked         (s : Up, t : Stop)
		to Stop

	Process Door 
	[]

 
	is
		states 
			Open,
			Closed,
			Sleep
	init
		to Sleep

	from Open
		CloseDoor;
		to Closed
	from Closed
		readyToGo;
		to Sleep
	from Sleep
		OpenDoor;

		to Open

	Process Sensor 
	[]

 
	is
		states 
			Idle,
			Detecting,
			Detected
		var 
			floor,
			cabinFloor
	init
		floor := -1;
		cabinFloor := -1;
		to Idle

	from Idle
		toMeasure ?  floor, cabinFloor;

		to Detecting
	from Detecting
		cabinArrived;
		to Detected
		toMeasure ? cabinFloor;
          if (floor = cabinFloor) then 
            to Detected
          else
            continueToMove
          end
		to Detecting
	from Detected
		wait[1,2];
		to Idle

	Process Sensor 
	[]

 
	is
		states 
			Idle,
			Detecting,
			Detected
		var 
			floor,
			cabinFloor
	init
		floor := -1;
		cabinFloor := -1;
		to Idle

	from Idle
		toMeasure ?  floor, cabinFloor;

		to Detecting
	from Detecting
		cabinArrived;
		to Detected
		toMeasure ? cabinFloor;
          if (floor = cabinFloor) then 
            to Detected
          else
            continueToMove
          end
		to Detecting
	from Detected
		wait[1,2];
		to Idle

	Process Sensor 
	[]

 
	is
		states 
			Idle,
			Detecting,
			Detected
		var 
			floor,
			cabinFloor
	init
		floor := -1;
		cabinFloor := -1;
		to Idle

	from Idle
		toMeasure ?  floor, cabinFloor;

		to Detecting
	from Detecting
		cabinArrived;
		to Detected
		toMeasure ? cabinFloor;
          if (floor = cabinFloor) then 
            to Detected
          else
            continueToMove
          end
		to Detecting
	from Detected
		wait[1,2];
		to Idle

	Process Sensor 
	[]

 
	is
		states 
			Idle,
			Detecting,
			Detected
		var 
			floor,
			cabinFloor
	init
		floor := -1;
		cabinFloor := -1;
		to Idle

	from Idle
		toMeasure ?  floor, cabinFloor;

		to Detecting
	from Detecting
		cabinArrived;
		to Detected
		toMeasure ? cabinFloor;
          if (floor = cabinFloor) then 
            to Detected
          else
            continueToMove
          end
		to Detecting
	from Detected
		wait[1,2];
		to Idle

	Process Sensor 
	[]

 
	is
		states 
			Idle,
			Detecting,
			Detected
		var 
			floor,
			cabinFloor
	init
		floor := -1;
		cabinFloor := -1;
		to Idle

	from Idle
		toMeasure ?  floor, cabinFloor;

		to Detecting
	from Detecting
		cabinArrived;
		to Detected
		toMeasure ? cabinFloor;
          if (floor = cabinFloor) then 
            to Detected
          else
            continueToMove
          end
		to Detecting
	from Detected
		wait[1,2];
		to Idle

	/*Component*/
	Component InstanceClsDiag is 
	par
	
	
			Button_ex,
			ControllerSys,
			Winch,
			Cabin,
			Door,
			Sensor,
			Sensor,
			Sensor,
			Sensor,
			Sensor
	

