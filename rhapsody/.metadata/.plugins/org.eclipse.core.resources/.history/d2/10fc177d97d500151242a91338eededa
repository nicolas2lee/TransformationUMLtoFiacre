<?xml version="1.0" encoding="UTF-8"?>
<xmi:XMI xmi:version="2.1" xmlns:xmi="http://schema.omg.org/spec/XMI/2.1" xmlns:fiacreMM="http://www.mdworkbench.com/fiacreMM">
  <fiacreMM:DataType Name="queue" Size="5" elementType="Button_exEvents"/>
  <fiacreMM:DataType Name="queue" Size="5" elementType="Button_exEvents"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="queue" Size="5" elementType="ControllerSysEvents"/>
  <fiacreMM:DataType Name="queue" Size="5" elementType="ControllerSysEvents"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="boolean"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="boolean"/>
  <fiacreMM:DataType Name="queue" Size="5" elementType="WinchEvents"/>
  <fiacreMM:DataType Name="queue" Size="5" elementType="WinchEvents"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="queue" Size="5" elementType="CabinEvents"/>
  <fiacreMM:DataType Name="queue" Size="5" elementType="CabinEvents"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="queue" Size="5" elementType="DoorEvents"/>
  <fiacreMM:DataType Name="queue" Size="5" elementType="DoorEvents"/>
  <fiacreMM:DataType Name="queue" Size="5" elementType="itsSensorEvents"/>
  <fiacreMM:DataType Name="queue" Size="5" elementType="itsSensorEvents"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="queue" Size="5" elementType="itsSensor_1Events"/>
  <fiacreMM:DataType Name="queue" Size="5" elementType="itsSensor_1Events"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="queue" Size="5" elementType="itsSensor_2Events"/>
  <fiacreMM:DataType Name="queue" Size="5" elementType="itsSensor_2Events"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="queue" Size="5" elementType="itsSensor_3Events"/>
  <fiacreMM:DataType Name="queue" Size="5" elementType="itsSensor_3Events"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="queue" Size="5" elementType="itsSensor_4Events"/>
  <fiacreMM:DataType Name="queue" Size="5" elementType="itsSensor_4Events"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:DataType Name="int"/>
  <fiacreMM:Program Name="Ascenseur" ComponentSize="1">
    <components Name="InstanceClsDiag" ProcessSize="10">
      <instances variables="/541" Name="Button_ex" initState="/113/@components.0/@instances.0/@states.0" StateSize="2">
        <transitions source="/126" target="/127" Name="1">
          <guard/>
          <trigger Body="arrive"/>
          <action codeFiacre="if (empty toButton_ex) then loop end;&#xD;&#xA;received := first toButton_ex;&#xD;&#xA;toButton_ex := dequeue(toButton_ex);&#xD;&#xA;if (received = arrive) then&#xD;&#xA;    to Off&#xD;&#xA;end"/>
        </transitions>
        <transitions source="/128" target="/129" Name="2">
          <guard/>
          <trigger Body="Pressed">
            <arguments datatype="/4" Name="requestFloor"/>
          </trigger>
          <action Body="getP_btn_con().gen(new receiveFromButton_Ex(params.requestFloor));" codeFiacre="output ! requestFloor;&#xD;&#xA;"/>
        </transitions>
        <transitions source="/130" target="/131" Name="3">
          <guard/>
          <trigger Body="tm(5)"/>
          <action codeFiacre="wait[4,5];"/>
        </transitions>
        <states Name="Off" outTransitions="/429" inTransitions="/426 /427 /428" process="/113/@components.0/@instances.0"/>
        <states Name="On" outTransitions="/431 /432" inTransitions="/430"/>
        <ports Name="p_btn_con"/>
      </instances>
      <instances variables="/543 /544 /545 /546 /547 /548 /549 /550" Name="ControllerSys" initState="/113/@components.0/@instances.1/@states.0" StateSize="9" VarSize="7">
        <transitions source="/188" target="/189" Name="1">
          <guard/>
          <trigger Body="detected"/>
          <action Body="sendStopToWinch()" codeFiacre="toWinch = enqueue(toWinch, stopFromController);&#xD;&#xA;"/>
        </transitions>
        <transitions source="/190" target="/191" Name="2">
          <guard/>
          <trigger Body="readyToOpenDoor"/>
          <action Body=" openDoor()" codeFiacre="toDoor := enqueue(toDoor, OpenDoor);&#xD;&#xA;toButton_ex := enqueue(toDoor, OpenDoor);&#xD;&#xA;"/>
        </transitions>
        <transitions source="/192" target="/193" Name="3">
          <guard/>
          <trigger Body="receiveFloorAndCloseDoor">
            <arguments datatype="/11" Name="requestedTargetFloor"/>
          </trigger>
          <action Body="closeDoor();&#xD;&#xA;targetFloor=params.requestedTargetFloor;    &#xD;&#xA;destFloor=targetFloor;" codeFiacre="toDoor := enqueue(toDoor, CloseDoor);&#xD;&#xA;targetFloor := params.requestedTargetFloor;    &#xD;&#xA;destFloor := targetFloor;"/>
        </transitions>
        <transitions source="/194" target="/195" Name="4">
          <guard/>
          <trigger Body="readyToOpenDoor"/>
          <action Body="if (currentFloor &lt; targetFloor){&#xD;&#xA;&#x9;getP_con_win().gen(new goUp());   &#xD;&#xA;&#x9;upordown=1; &#xD;&#xA;&#x9;&#xD;&#xA;&#x9;sendToMeasureSensor(targetFloor);&#xD;&#xA;}else{&#xD;&#xA;&#x9;if (currentFloor == targetFloor) {        &#xD;&#xA;&#x9;&#x9;gen (new gotoOpenDoorDirectly());&#xD;&#xA;&#x9;}else{&#xD;&#xA;&#x9;&#x9;getP_con_win().gen(new goDown()); &#xD;&#xA;&#x9;&#x9;upordown=-1;  &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;sendToMeasureSensor(targetFloor);&#xD;&#xA;&#x9;}&#xD;&#xA;}" codeFiacre="if (currentFloor &lt; targetFloor) then&#xD;&#xA;            toWinch := enqueue(toWinch, goUp); &#xD;&#xA;&#x9;upordown := 1; &#xD;&#xA;&#x9;sendToMeasureSensor(targetFloor);&#xD;&#xA;else&#xD;&#xA;&#x9;if (currentFloor = targetFloor) then       &#xD;&#xA;                        toControllerSys := enqueue(toControllerSys, gotoOpenDoorDirectly); &#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;toWinch := enqueue(toWinch, goDown); &#xD;&#xA;&#x9;&#x9;upordown := upordown-1;  &#xD;&#xA;&#x9;&#x9;case targetFloor of &#xD;&#xA;&#x9;                0 -> toSensor = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA;&#x9;             |  1 ->  toSensor1 = enqueue(toSensor, toMeasure(currentFloor, floor));     &#x9;  &#xD;&#xA;&#x9;             |  2 ->  toSensor2 = enqueue(toSensor, toMeasure(currentFloor, floor));  &#x9; &#xD;&#xA;&#x9;             |  3 ->  toSensor3 = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA;&#x9;             |  4 ->  toSensor4 = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA;                         end;&#xD;&#xA;&#x9;end;&#xD;&#xA;end;"/>
        </transitions>
        <transitions source="/196" target="/197" Name="5">
          <guard/>
          <trigger Body="receiveFromButton_Ex">
            <arguments datatype="/12" Name="requestedFloor"/>
          </trigger>
          <action Body="exBtnFloor=params.requestedFloor;  &#xD;&#xA;destFloor=exBtnFloor;&#xD;&#xA;if (currentFloor &lt; exBtnFloor){&#xD;&#xA;&#x9;getP_con_win().gen(new goUp());   &#xD;&#xA;&#x9;upordown=1;  &#xD;&#xA;&#x9;sendToMeasureSensor(exBtnFloor);&#xD;&#xA;}else{&#xD;&#xA;&#x9;if (currentFloor == exBtnFloor) {&#xD;&#xA;&#x9;&#x9;//open the door         &#xD;&#xA;&#x9;&#x9;gen (new gotoOpenDoorDirectly());&#xD;&#xA;&#x9;}else{&#xD;&#xA;&#x9;&#x9;getP_con_win().gen(new goDown()); &#xD;&#xA;&#x9;&#x9;upordown=-1;  &#xD;&#xA;&#x9;&#x9;sendToMeasureSensor(exBtnFloor);&#xD;&#xA;&#x9;}&#xD;&#xA;}" codeFiacre="input ? exBtnFloor;     &#xD;&#xA;destFloor := exBtnFloor;&#xD;&#xA;if (currentFloor &lt; exBtnFloor) then&#xD;&#xA;            toWinch = enqueue(toWinch, goUp);&#xD;&#xA;&#x9;upordown := 1;  &#xD;&#xA;            case floor of &#xD;&#xA;&#x9;      0 -> toSensor = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA;&#x9;   |  1 ->  toSensor1 = enqueue(toSensor, toMeasure(currentFloor, floor));     &#x9;  &#xD;&#xA;&#x9;   |  2 ->  toSensor2 = enqueue(toSensor, toMeasure(currentFloor, floor));  &#x9; &#xD;&#xA;&#x9;   |  3 ->  toSensor3 = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA;&#x9;   |  4 ->  toSensor4 = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA;            end;&#xD;&#xA;else&#xD;&#xA;&#x9;if (currentFloor == exBtnFloor)  then      &#xD;&#xA;                        toControllerSys = enqueue(toControllerSys, gotoOpenDoorDirectly)&#xD;&#xA;&#x9;else&#xD;&#xA;                        toWinch = enqueue(toWinch, goDown)&#xD;&#xA;&#x9;            upordown := -1;  &#xD;&#xA;&#x9;&#x9;case floor of &#xD;&#xA;&#x9;                0 -> toSensor = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA;&#x9;             |  1 ->  toSensor1 = enqueue(toSensor, toMeasure(currentFloor, floor));     &#x9;  &#xD;&#xA;&#x9;             |  2 ->  toSensor2 = enqueue(toSensor, toMeasure(currentFloor, floor));  &#x9; &#xD;&#xA;&#x9;             |  3 ->  toSensor3 = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA;&#x9;             |  4 ->  toSensor4 = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA;                        end;&#xD;&#xA;&#x9;end;&#xD;&#xA;end;"/>
        </transitions>
        <transitions source="/198" target="/199" Name="6">
          <guard/>
          <trigger Body="receiveCabinMoved"/>
          <action Body="currentFloor+=upordown;   &#xD;&#xA;sendToMeasureSensor(destFloor);" codeFiacre="currentFloor := currentFloor+ upordown;   &#xD;&#xA;case floor of &#xD;&#xA;&#x9;      0 ->  toSensor = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA;&#x9;   |  1 ->  toSensor1 = enqueue(toSensor, toMeasure(currentFloor, floor));     &#x9;  &#xD;&#xA;&#x9;   |  2 ->  toSensor2 = enqueue(toSensor, toMeasure(currentFloor, floor));  &#x9; &#xD;&#xA;&#x9;   |  3 ->  toSensor3 = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA;&#x9;   |  4 ->  toSensor4 = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA;end;&#xD;&#xA;"/>
        </transitions>
        <transitions source="/200" target="/201" Name="7">
          <guard/>
          <trigger Body="braked"/>
          <action Body="sendToWinchToStop();" codeFiacre="toWinch = enqueue(toWinch, stop);&#xD;&#xA;"/>
        </transitions>
        <transitions source="/202" target="/203" Name="8">
          <guard/>
          <trigger Body="gotoOpenDoorDirectly"/>
          <action Body="gen (new readyToOpenDoor());" codeFiacre="toControllerSys := enqueue(toControllerSys, readyToOpenDoor);&#xD;&#xA;"/>
        </transitions>
        <transitions source="/204" target="/205" Name="9">
          <guard/>
          <trigger Body="continueToMove"/>
          <action Body="currentFloor+=upordown;   &#xD;&#xA;sendToMeasureSensor(destFloor);" codeFiacre="currentFloor := currentFloor + upordown;   &#xD;&#xA;sendToMeasureSensor(destFloor);&#xD;&#xA;case destFloor of &#xD;&#xA;&#x9;      0 -> toSensor = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA;&#x9;   |  1 ->  toSensor1 = enqueue(toSensor, toMeasure(currentFloor, floor));     &#x9;  &#xD;&#xA;&#x9;   |  2 ->  toSensor2 = enqueue(toSensor, toMeasure(currentFloor, floor));  &#x9; &#xD;&#xA;&#x9;   |  3 ->  toSensor3 = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA;&#x9;   |  4 ->  toSensor4 = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA; end;&#xD;&#xA;"/>
        </transitions>
        <transitions source="/206" target="/207" Name="10">
          <guard/>
          <trigger Body="receiveCabinMoved"/>
          <action Body="currentFloor+=upordown;   &#xD;&#xA;loadedPassager=true;        &#xD;&#xA;sendToMeasureSensor(destFloor);" codeFiacre="currentFloor := currentFloor+upordown;   &#xD;&#xA;loadedPassager := true;        &#xD;&#xA; case destFloor of &#xD;&#xA;&#x9;      0 -> toSensor = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA;&#x9;   |  1 ->  toSensor1 = enqueue(toSensor, toMeasure(currentFloor, floor));     &#x9;  &#xD;&#xA;&#x9;   |  2 ->  toSensor2 = enqueue(toSensor, toMeasure(currentFloor, floor));  &#x9; &#xD;&#xA;&#x9;   |  3 ->  toSensor3 = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA;&#x9;   |  4 ->  toSensor4 = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA;end;&#xD;&#xA;"/>
        </transitions>
        <transitions source="/208" target="/209" Name="11">
          <guard/>
          <trigger Body="gotoOpenDoorDirectly"/>
          <action Body="gen(new readyToOpenDoor());" codeFiacre="toControllerSys := enqueue(toCOntrollerSys, readyToOpenDoor);"/>
        </transitions>
        <transitions source="/210" target="/211" Name="12">
          <guard/>
          <trigger Body="doneTask"/>
          <action Body="loadedPassager=false;" codeFiacre="loadedPassager := false;"/>
        </transitions>
        <transitions source="/212" target="/213" Name="13">
          <guard Body="loadedPassager"/>
          <trigger/>
          <action Body="closeDoor();" codeFiacre="toDoor := enqueue(toDoor, CloseDoor);"/>
        </transitions>
        <transitions source="/214" target="/215" Name="14">
          <guard/>
          <trigger Body="readyToGo"/>
          <action Body="gen(new doneTask());" codeFiacre="toControllerSys := enqueue(toControllerSys, doneTask)"/>
        </transitions>
        <states Name="Wait" outTransitions="/435" inTransitions="/433 /434" process="/113/@components.0/@instances.1"/>
        <states Name="cabinMoved" outTransitions="/439 /440" inTransitions="/436 /437 /438"/>
        <states Name="cabinArrived" outTransitions="/442" inTransitions="/441"/>
        <states Name="doorOpened" outTransitions="/444 /445" inTransitions="/443"/>
        <states Name="doorClosed" outTransitions="/448 /449" inTransitions="/446 /447"/>
        <states Name="receiveRequestFromButtonEx" outTransitions="/451 /452" inTransitions="/450"/>
        <states Name="cabinBraked" outTransitions="/456" inTransitions="/453 /454 /455"/>
        <states Name="recievedRequestFromCabin" outTransitions="/458 /459" inTransitions="/457"/>
        <states Name="waitDoorClosed" outTransitions="/461" inTransitions="/460"/>
        <ports Name="p_con_btn"/>
        <ports Name="p_con_sen"/>
        <ports Name="p_con_door"/>
        <ports Name="p_con_win"/>
        <ports Name="p_con_cab"/>
        <ports Name="p_con_sen_1"/>
        <ports Name="p_con_sen_2"/>
        <ports Name="p_con_sen_3"/>
        <ports Name="p_con_sen_4"/>
      </instances>
      <instances variables="/552 /553 /554 /555" Name="Winch" initState="/113/@components.0/@instances.2/@states.0" StateSize="4" VarSize="3">
        <transitions source="/236" target="/237" Name="1">
          <guard/>
          <trigger Body="goUp"/>
          <action Body="sendGoUpToCabin();" codeFiacre="toCabin := enqueue(toCabin moveCabinUp);"/>
        </transitions>
        <transitions source="/238" target="/239" Name="2">
          <guard/>
          <trigger Body="stop"/>
          <action Body="receiveStopFromController();" codeFiacre="toControllerSys := enqueue(toControllerSys,readyToOpenDoor);"/>
        </transitions>
        <transitions source="/240" target="/241" Name="3">
          <guard/>
          <trigger Body="goDown"/>
          <action Body="sendGoDownToCabin();" codeFiacre="toCabin := enqueue (toCabin, moveCabinDown);"/>
        </transitions>
        <transitions source="/242" target="/243" Name="4">
          <guard/>
          <trigger Body="stopFromController"/>
          <action Body="sendBrakeToCabin();" codeFiacre="toCabin := enqueue(toCabin, braked);"/>
        </transitions>
        <transitions source="/244" target="/245" Name="5">
          <guard/>
          <trigger Body="stopFromController"/>
          <action Body="sendBrakeToCabin();" codeFiacre="toCabin := enqueue(toCabin,braked);"/>
        </transitions>
        <states Name="Not_Going" outTransitions="/464 /465" inTransitions="/462 /463" process="/113/@components.0/@instances.2"/>
        <states Name="Going_Up" outTransitions="/467" inTransitions="/466"/>
        <states Name="Going_Down" outTransitions="/469" inTransitions="/468"/>
        <states Name="receiveCabinBrakedFromControllerSys" outTransitions="/472" inTransitions="/470 /471"/>
        <ports Name="p_win_con"/>
        <ports Name="p_win_cab"/>
      </instances>
      <instances variables="/557 /558" Name="Cabin" initState="/113/@components.0/@instances.3/@states.0" StateSize="4" VarSize="1">
        <transitions source="/274" target="/275" Name="1">
          <guard/>
          <trigger Body="braked"/>
          <action Body="sendCabinBrakedToController();" codeFiacre="toControllerSys := enqueue (toControllerSys, braked);&#xD;&#xA;"/>
        </transitions>
        <transitions source="/276" target="/277" Name="2">
          <guard/>
          <trigger Body="sendFloorAndCloseDoor">
            <arguments datatype="/29" Name="targetFloor"/>
          </trigger>
          <action Body="getP_cab_con().gen (new receiveFloorAndCloseDoor(params.targetFloor));" codeFiacre="toControllerSys := enqueue(toControllerSys, receiveFloorAndCloseDoor(params.targetFloor));"/>
        </transitions>
        <transitions source="/278" target="/279" Name="3">
          <guard/>
          <trigger Body="moveCabinDown"/>
          <action Body="sendMovedDownToController();" codeFiacre="toControllerSys := enqueue (toControllerSys, receiveCabinMoved);"/>
        </transitions>
        <transitions source="/280" target="/281" Name="4">
          <guard/>
          <trigger Body="moveCabinDown"/>
          <action Body="sendMovedDownToController();" codeFiacre="toControllerSys := enqueue(toControllerSys, receiveCabinMoved);&#xD;&#xA;"/>
        </transitions>
        <transitions source="/282" target="/283" Name="5">
          <guard/>
          <trigger Body="moveCabinUp"/>
          <action Body="sendMovedUpToController();" codeFiacre="toControllerSys := enqueue(toControllerSys, receiveCabinMoved );"/>
        </transitions>
        <transitions source="/284" target="/285" Name="6">
          <guard/>
          <trigger Body="braked"/>
          <action Body="sendCabinBrakedToController();" codeFiacre="toControllerSys := enqueue(toControllerSys, braked);"/>
        </transitions>
        <transitions source="/286" target="/287" Name="7">
          <guard/>
          <trigger Body="moveCabinUp"/>
          <action Body="sendMovedUpToController();" codeFiacre="toControllerSys := enqueue(toControllerSys,  receiveCabinMoved );"/>
        </transitions>
        <states Name="Stop" outTransitions="/476 /477 /478" inTransitions="/473 /474 /475" process="/113/@components.0/@instances.3"/>
        <states Name="Down" outTransitions="/481" inTransitions="/479 /480"/>
        <states Name="sentInfo" outTransitions="/483 /484" inTransitions="/482"/>
        <states Name="Up" outTransitions="/487" inTransitions="/485 /486"/>
        <ports Name="p_cab_con"/>
        <ports Name="p_cab_win"/>
      </instances>
      <instances variables="/560" Name="Door" initState="/113/@components.0/@instances.4/@states.2" StateSize="3">
        <transitions source="/300" target="/301" Name="1">
          <guard/>
          <trigger Body="OpenDoor"/>
          <action codeFiacre="if (empty toDoor) then loop end;&#xD;&#xA;received := first toDoor;&#xD;&#xA;toDoor := dequeue(toDoor);&#xD;&#xA;if (received = OpenDoor) then to Open end;"/>
        </transitions>
        <transitions source="/302" target="/303" Name="2">
          <guard/>
          <trigger Body="CloseDoor"/>
          <action codeFiacre="if (empty toDoor) then loop end;&#xD;&#xA;received := first toDoor;&#xD;&#xA;toDoor := dequeue(toDoor);&#xD;&#xA;if (received = CloseDoor) then to Closed end;"/>
        </transitions>
        <transitions source="/304" target="/305" Name="3">
          <guard/>
          <trigger/>
          <action Body="goSleep();" codeFiacre="toControllerSys := enqueue (toController, readyToGo);"/>
        </transitions>
        <states Name="Open" outTransitions="/489" inTransitions="/488"/>
        <states Name="Closed" outTransitions="/491" inTransitions="/490"/>
        <states Name="Sleep" outTransitions="/494" inTransitions="/492 /493" process="/113/@components.0/@instances.4"/>
        <ports Name="p_door_con"/>
      </instances>
      <instances variables="/562 /563 /564" Name="Sensor" initState="/113/@components.0/@instances.5/@states.0" StateSize="3" VarSize="2">
        <transitions source="/322" target="/323" Name="0">
          <guard/>
          <trigger Body="toMeasure">
            <arguments datatype="/43" Name="currentFloor"/>
            <arguments datatype="/44" Name="sensorFloor"/>
          </trigger>
          <action Body="floor=params.sensorFloor;&#xD;&#xA;cabinFloor=params.currentFloor;" codeFiacre="floor := params.sensorFloor;&#xD;&#xA;cabinFloor := params.currentFloor;"/>
        </transitions>
        <transitions source="/324" target="/325" Name="1">
          <guard/>
          <trigger Body="cabinArrived"/>
          <action Body="sendCabinArrived();" codeFiacre="toControllerSys := enqueue (toControllerSys, detected);"/>
        </transitions>
        <transitions source="/326" target="/327" Name="2">
          <guard/>
          <trigger Body="tm(1)"/>
          <action codeFiacre="wait[1,2]"/>
        </transitions>
        <transitions source="/328" target="/329" Name="4">
          <guard/>
          <trigger Body="toMeasure">
            <arguments datatype="/45" Name="currentFloor"/>
            <arguments datatype="/46" Name="sensorFloor"/>
          </trigger>
          <action Body="cabinFloor=params.currentFloor; &#xD;&#xA;checkArrived();" codeFiacre="cabinFloor=params.currentFloor; &#xD;&#xA;if (floor = cabinFloor)  then&#xD;&#xA;            case sensorFloor of &#xD;&#xA;&#x9;      0 -> toSensor = enqueue(toSensor,cabinArrived);   &#xD;&#xA;&#x9;   |  1 ->  toSensor1 = enqueue(toSensor1, cabinArrived);     &#x9;  &#xD;&#xA;&#x9;   |  2 ->  toSensor2 = enqueue(toSensor2, cabinArrived);  &#x9; &#xD;&#xA;&#x9;   |  3 ->  toSensor3 = enqueue(toSensor3, cabinArrived);   &#xD;&#xA;&#x9;   |  4 ->  toSensor4 = enqueue(toSensor4, cabinArrived);   &#xD;&#xA;            end;&#xD;&#xA;else&#xD;&#xA;&#x9;wait[1,2];&#xD;&#xA;&#x9;case sensorFloor of &#xD;&#xA;&#x9;      0 -> toSensor = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA;&#x9;   |  1 ->  toSensor1 = enqueue(toSensor1, toMeasure(currentFloor, floor));     &#x9;  &#xD;&#xA;&#x9;   |  2 ->  toSensor2 = enqueue(toSensor2, toMeasure(currentFloor, floor));  &#x9; &#xD;&#xA;&#x9;   |  3 ->  toSensor3 = enqueue(toSensor3, toMeasure(currentFloor, floor));   &#xD;&#xA;&#x9;   |  4 ->  toSensor4 = enqueue(toSensor4, toMeasure(currentFloor, floor));   &#xD;&#xA;            end;&#xD;&#xA;end;"/>
        </transitions>
        <states Name="Idle" outTransitions="/497" inTransitions="/495 /496" process="/113/@components.0/@instances.5"/>
        <states Name="Detecting" outTransitions="/500 /501" inTransitions="/498 /499"/>
        <states Name="Detected" outTransitions="/503" inTransitions="/502"/>
        <ports Name="p_sen_con"/>
        <ports Name="p_sen_con_1"/>
        <ports Name="p_sen_con_2"/>
        <ports Name="p_sen_con_3"/>
        <ports Name="p_sen_con_4"/>
      </instances>
      <instances variables="/566 /567 /568" Name="Sensor" initState="/113/@components.0/@instances.6/@states.0" StateSize="3" VarSize="2">
        <transitions source="/346" target="/347" Name="0">
          <guard/>
          <trigger Body="toMeasure">
            <arguments datatype="/59" Name="currentFloor"/>
            <arguments datatype="/60" Name="sensorFloor"/>
          </trigger>
          <action Body="floor=params.sensorFloor;&#xD;&#xA;cabinFloor=params.currentFloor;" codeFiacre="floor := params.sensorFloor;&#xD;&#xA;cabinFloor := params.currentFloor;"/>
        </transitions>
        <transitions source="/348" target="/349" Name="1">
          <guard/>
          <trigger Body="cabinArrived"/>
          <action Body="sendCabinArrived();" codeFiacre="toControllerSys := enqueue (toControllerSys, detected);"/>
        </transitions>
        <transitions source="/350" target="/351" Name="2">
          <guard/>
          <trigger Body="tm(1)"/>
          <action codeFiacre="wait[1,2]"/>
        </transitions>
        <transitions source="/352" target="/353" Name="4">
          <guard/>
          <trigger Body="toMeasure">
            <arguments datatype="/61" Name="currentFloor"/>
            <arguments datatype="/62" Name="sensorFloor"/>
          </trigger>
          <action Body="cabinFloor=params.currentFloor; &#xD;&#xA;checkArrived();" codeFiacre="cabinFloor=params.currentFloor; &#xD;&#xA;if (floor = cabinFloor)  then&#xD;&#xA;            case sensorFloor of &#xD;&#xA;&#x9;      0 -> toSensor = enqueue(toSensor,cabinArrived);   &#xD;&#xA;&#x9;   |  1 ->  toSensor1 = enqueue(toSensor1, cabinArrived);     &#x9;  &#xD;&#xA;&#x9;   |  2 ->  toSensor2 = enqueue(toSensor2, cabinArrived);  &#x9; &#xD;&#xA;&#x9;   |  3 ->  toSensor3 = enqueue(toSensor3, cabinArrived);   &#xD;&#xA;&#x9;   |  4 ->  toSensor4 = enqueue(toSensor4, cabinArrived);   &#xD;&#xA;            end;&#xD;&#xA;else&#xD;&#xA;&#x9;wait[1,2];&#xD;&#xA;&#x9;case sensorFloor of &#xD;&#xA;&#x9;      0 -> toSensor = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA;&#x9;   |  1 ->  toSensor1 = enqueue(toSensor1, toMeasure(currentFloor, floor));     &#x9;  &#xD;&#xA;&#x9;   |  2 ->  toSensor2 = enqueue(toSensor2, toMeasure(currentFloor, floor));  &#x9; &#xD;&#xA;&#x9;   |  3 ->  toSensor3 = enqueue(toSensor3, toMeasure(currentFloor, floor));   &#xD;&#xA;&#x9;   |  4 ->  toSensor4 = enqueue(toSensor4, toMeasure(currentFloor, floor));   &#xD;&#xA;            end;&#xD;&#xA;end;"/>
        </transitions>
        <states Name="Idle" outTransitions="/506" inTransitions="/504 /505" process="/113/@components.0/@instances.6"/>
        <states Name="Detecting" outTransitions="/509 /510" inTransitions="/507 /508"/>
        <states Name="Detected" outTransitions="/512" inTransitions="/511"/>
        <ports Name="p_sen_con"/>
        <ports Name="p_sen_con_1"/>
        <ports Name="p_sen_con_2"/>
        <ports Name="p_sen_con_3"/>
        <ports Name="p_sen_con_4"/>
      </instances>
      <instances variables="/570 /571 /572" Name="Sensor" initState="/113/@components.0/@instances.7/@states.0" StateSize="3" VarSize="2">
        <transitions source="/370" target="/371" Name="0">
          <guard/>
          <trigger Body="toMeasure">
            <arguments datatype="/75" Name="currentFloor"/>
            <arguments datatype="/76" Name="sensorFloor"/>
          </trigger>
          <action Body="floor=params.sensorFloor;&#xD;&#xA;cabinFloor=params.currentFloor;" codeFiacre="floor := params.sensorFloor;&#xD;&#xA;cabinFloor := params.currentFloor;"/>
        </transitions>
        <transitions source="/372" target="/373" Name="1">
          <guard/>
          <trigger Body="cabinArrived"/>
          <action Body="sendCabinArrived();" codeFiacre="toControllerSys := enqueue (toControllerSys, detected);"/>
        </transitions>
        <transitions source="/374" target="/375" Name="2">
          <guard/>
          <trigger Body="tm(1)"/>
          <action codeFiacre="wait[1,2]"/>
        </transitions>
        <transitions source="/376" target="/377" Name="4">
          <guard/>
          <trigger Body="toMeasure">
            <arguments datatype="/77" Name="currentFloor"/>
            <arguments datatype="/78" Name="sensorFloor"/>
          </trigger>
          <action Body="cabinFloor=params.currentFloor; &#xD;&#xA;checkArrived();" codeFiacre="cabinFloor=params.currentFloor; &#xD;&#xA;if (floor = cabinFloor)  then&#xD;&#xA;            case sensorFloor of &#xD;&#xA;&#x9;      0 -> toSensor = enqueue(toSensor,cabinArrived);   &#xD;&#xA;&#x9;   |  1 ->  toSensor1 = enqueue(toSensor1, cabinArrived);     &#x9;  &#xD;&#xA;&#x9;   |  2 ->  toSensor2 = enqueue(toSensor2, cabinArrived);  &#x9; &#xD;&#xA;&#x9;   |  3 ->  toSensor3 = enqueue(toSensor3, cabinArrived);   &#xD;&#xA;&#x9;   |  4 ->  toSensor4 = enqueue(toSensor4, cabinArrived);   &#xD;&#xA;            end;&#xD;&#xA;else&#xD;&#xA;&#x9;wait[1,2];&#xD;&#xA;&#x9;case sensorFloor of &#xD;&#xA;&#x9;      0 -> toSensor = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA;&#x9;   |  1 ->  toSensor1 = enqueue(toSensor1, toMeasure(currentFloor, floor));     &#x9;  &#xD;&#xA;&#x9;   |  2 ->  toSensor2 = enqueue(toSensor2, toMeasure(currentFloor, floor));  &#x9; &#xD;&#xA;&#x9;   |  3 ->  toSensor3 = enqueue(toSensor3, toMeasure(currentFloor, floor));   &#xD;&#xA;&#x9;   |  4 ->  toSensor4 = enqueue(toSensor4, toMeasure(currentFloor, floor));   &#xD;&#xA;            end;&#xD;&#xA;end;"/>
        </transitions>
        <states Name="Idle" outTransitions="/515" inTransitions="/513 /514" process="/113/@components.0/@instances.7"/>
        <states Name="Detecting" outTransitions="/518 /519" inTransitions="/516 /517"/>
        <states Name="Detected" outTransitions="/521" inTransitions="/520"/>
        <ports Name="p_sen_con"/>
        <ports Name="p_sen_con_1"/>
        <ports Name="p_sen_con_2"/>
        <ports Name="p_sen_con_3"/>
        <ports Name="p_sen_con_4"/>
      </instances>
      <instances variables="/574 /575 /576" Name="Sensor" initState="/113/@components.0/@instances.8/@states.0" StateSize="3" VarSize="2">
        <transitions source="/394" target="/395" Name="0">
          <guard/>
          <trigger Body="toMeasure">
            <arguments datatype="/91" Name="currentFloor"/>
            <arguments datatype="/92" Name="sensorFloor"/>
          </trigger>
          <action Body="floor=params.sensorFloor;&#xD;&#xA;cabinFloor=params.currentFloor;" codeFiacre="floor := params.sensorFloor;&#xD;&#xA;cabinFloor := params.currentFloor;"/>
        </transitions>
        <transitions source="/396" target="/397" Name="1">
          <guard/>
          <trigger Body="cabinArrived"/>
          <action Body="sendCabinArrived();" codeFiacre="toControllerSys := enqueue (toControllerSys, detected);"/>
        </transitions>
        <transitions source="/398" target="/399" Name="2">
          <guard/>
          <trigger Body="tm(1)"/>
          <action codeFiacre="wait[1,2]"/>
        </transitions>
        <transitions source="/400" target="/401" Name="4">
          <guard/>
          <trigger Body="toMeasure">
            <arguments datatype="/93" Name="currentFloor"/>
            <arguments datatype="/94" Name="sensorFloor"/>
          </trigger>
          <action Body="cabinFloor=params.currentFloor; &#xD;&#xA;checkArrived();" codeFiacre="cabinFloor=params.currentFloor; &#xD;&#xA;if (floor = cabinFloor)  then&#xD;&#xA;            case sensorFloor of &#xD;&#xA;&#x9;      0 -> toSensor = enqueue(toSensor,cabinArrived);   &#xD;&#xA;&#x9;   |  1 ->  toSensor1 = enqueue(toSensor1, cabinArrived);     &#x9;  &#xD;&#xA;&#x9;   |  2 ->  toSensor2 = enqueue(toSensor2, cabinArrived);  &#x9; &#xD;&#xA;&#x9;   |  3 ->  toSensor3 = enqueue(toSensor3, cabinArrived);   &#xD;&#xA;&#x9;   |  4 ->  toSensor4 = enqueue(toSensor4, cabinArrived);   &#xD;&#xA;            end;&#xD;&#xA;else&#xD;&#xA;&#x9;wait[1,2];&#xD;&#xA;&#x9;case sensorFloor of &#xD;&#xA;&#x9;      0 -> toSensor = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA;&#x9;   |  1 ->  toSensor1 = enqueue(toSensor1, toMeasure(currentFloor, floor));     &#x9;  &#xD;&#xA;&#x9;   |  2 ->  toSensor2 = enqueue(toSensor2, toMeasure(currentFloor, floor));  &#x9; &#xD;&#xA;&#x9;   |  3 ->  toSensor3 = enqueue(toSensor3, toMeasure(currentFloor, floor));   &#xD;&#xA;&#x9;   |  4 ->  toSensor4 = enqueue(toSensor4, toMeasure(currentFloor, floor));   &#xD;&#xA;            end;&#xD;&#xA;end;"/>
        </transitions>
        <states Name="Idle" outTransitions="/524" inTransitions="/522 /523" process="/113/@components.0/@instances.8"/>
        <states Name="Detecting" outTransitions="/527 /528" inTransitions="/525 /526"/>
        <states Name="Detected" outTransitions="/530" inTransitions="/529"/>
        <ports Name="p_sen_con"/>
        <ports Name="p_sen_con_1"/>
        <ports Name="p_sen_con_2"/>
        <ports Name="p_sen_con_3"/>
        <ports Name="p_sen_con_4"/>
      </instances>
      <instances variables="/578 /579 /580" Name="Sensor" initState="/113/@components.0/@instances.9/@states.0" StateSize="3" VarSize="2">
        <transitions source="/418" target="/419" Name="0">
          <guard/>
          <trigger Body="toMeasure">
            <arguments datatype="/107" Name="currentFloor"/>
            <arguments datatype="/108" Name="sensorFloor"/>
          </trigger>
          <action Body="floor=params.sensorFloor;&#xD;&#xA;cabinFloor=params.currentFloor;" codeFiacre="floor := params.sensorFloor;&#xD;&#xA;cabinFloor := params.currentFloor;"/>
        </transitions>
        <transitions source="/420" target="/421" Name="1">
          <guard/>
          <trigger Body="cabinArrived"/>
          <action Body="sendCabinArrived();" codeFiacre="toControllerSys := enqueue (toControllerSys, detected);"/>
        </transitions>
        <transitions source="/422" target="/423" Name="2">
          <guard/>
          <trigger Body="tm(1)"/>
          <action codeFiacre="wait[1,2]"/>
        </transitions>
        <transitions source="/424" target="/425" Name="4">
          <guard/>
          <trigger Body="toMeasure">
            <arguments datatype="/109" Name="currentFloor"/>
            <arguments datatype="/110" Name="sensorFloor"/>
          </trigger>
          <action Body="cabinFloor=params.currentFloor; &#xD;&#xA;checkArrived();" codeFiacre="cabinFloor=params.currentFloor; &#xD;&#xA;if (floor = cabinFloor)  then&#xD;&#xA;            case sensorFloor of &#xD;&#xA;&#x9;      0 -> toSensor = enqueue(toSensor,cabinArrived);   &#xD;&#xA;&#x9;   |  1 ->  toSensor1 = enqueue(toSensor1, cabinArrived);     &#x9;  &#xD;&#xA;&#x9;   |  2 ->  toSensor2 = enqueue(toSensor2, cabinArrived);  &#x9; &#xD;&#xA;&#x9;   |  3 ->  toSensor3 = enqueue(toSensor3, cabinArrived);   &#xD;&#xA;&#x9;   |  4 ->  toSensor4 = enqueue(toSensor4, cabinArrived);   &#xD;&#xA;            end;&#xD;&#xA;else&#xD;&#xA;&#x9;wait[1,2];&#xD;&#xA;&#x9;case sensorFloor of &#xD;&#xA;&#x9;      0 -> toSensor = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA;&#x9;   |  1 ->  toSensor1 = enqueue(toSensor1, toMeasure(currentFloor, floor));     &#x9;  &#xD;&#xA;&#x9;   |  2 ->  toSensor2 = enqueue(toSensor2, toMeasure(currentFloor, floor));  &#x9; &#xD;&#xA;&#x9;   |  3 ->  toSensor3 = enqueue(toSensor3, toMeasure(currentFloor, floor));   &#xD;&#xA;&#x9;   |  4 ->  toSensor4 = enqueue(toSensor4, toMeasure(currentFloor, floor));   &#xD;&#xA;            end;&#xD;&#xA;end;"/>
        </transitions>
        <states Name="Idle" outTransitions="/533" inTransitions="/531 /532" process="/113/@components.0/@instances.9"/>
        <states Name="Detecting" outTransitions="/536 /537" inTransitions="/534 /535"/>
        <states Name="Detected" outTransitions="/539" inTransitions="/538"/>
        <ports Name="p_sen_con"/>
        <ports Name="p_sen_con_1"/>
        <ports Name="p_sen_con_2"/>
        <ports Name="p_sen_con_3"/>
        <ports Name="p_sen_con_4"/>
      </instances>
    </components>
  </fiacreMM:Program>
  <fiacreMM:State Name="On" outTransitions="/427"/>
  <fiacreMM:State Name="Off"/>
  <fiacreMM:State Name="On" outTransitions="/428"/>
  <fiacreMM:State Name="Off"/>
  <fiacreMM:State Name="Off"/>
  <fiacreMM:State Name="On" inTransitions="/429"/>
  <fiacreMM:State Name="Off" outTransitions="/430"/>
  <fiacreMM:State Name="On"/>
  <fiacreMM:State Name="On"/>
  <fiacreMM:State Name="Off" inTransitions="/431"/>
  <fiacreMM:State Name="On"/>
  <fiacreMM:State Name="Off" inTransitions="/432"/>
  <fiacreMM:State Name="On" outTransitions="/113/@components.0/@instances.0/@transitions.0"/>
  <fiacreMM:State Name="Off" inTransitions="/113/@components.0/@instances.0/@transitions.0"/>
  <fiacreMM:State Name="Off" outTransitions="/113/@components.0/@instances.0/@transitions.1"/>
  <fiacreMM:State Name="On" inTransitions="/113/@components.0/@instances.0/@transitions.1"/>
  <fiacreMM:State Name="On" outTransitions="/113/@components.0/@instances.0/@transitions.2"/>
  <fiacreMM:State Name="Off" inTransitions="/113/@components.0/@instances.0/@transitions.2"/>
  <fiacreMM:State Name="doorClosed" outTransitions="/434"/>
  <fiacreMM:State Name="Wait"/>
  <fiacreMM:State Name="Wait"/>
  <fiacreMM:State Name="receiveRequestFromButtonEx" inTransitions="/435"/>
  <fiacreMM:State Name="receiveRequestFromButtonEx" outTransitions="/436"/>
  <fiacreMM:State Name="cabinMoved"/>
  <fiacreMM:State Name="cabinMoved" outTransitions="/437"/>
  <fiacreMM:State Name="cabinMoved"/>
  <fiacreMM:State Name="recievedRequestFromCabin" outTransitions="/438"/>
  <fiacreMM:State Name="cabinMoved"/>
  <fiacreMM:State Name="cabinMoved"/>
  <fiacreMM:State Name="cabinArrived" inTransitions="/439"/>
  <fiacreMM:State Name="cabinMoved"/>
  <fiacreMM:State Name="cabinMoved" inTransitions="/440"/>
  <fiacreMM:State Name="cabinMoved" outTransitions="/441"/>
  <fiacreMM:State Name="cabinArrived"/>
  <fiacreMM:State Name="cabinArrived"/>
  <fiacreMM:State Name="cabinBraked" inTransitions="/442"/>
  <fiacreMM:State Name="cabinBraked" outTransitions="/443"/>
  <fiacreMM:State Name="doorOpened"/>
  <fiacreMM:State Name="doorOpened"/>
  <fiacreMM:State Name="doorClosed" inTransitions="/444"/>
  <fiacreMM:State Name="doorOpened"/>
  <fiacreMM:State Name="waitDoorClosed" inTransitions="/445"/>
  <fiacreMM:State Name="doorOpened" outTransitions="/446"/>
  <fiacreMM:State Name="doorClosed"/>
  <fiacreMM:State Name="waitDoorClosed" outTransitions="/447"/>
  <fiacreMM:State Name="doorClosed"/>
  <fiacreMM:State Name="doorClosed"/>
  <fiacreMM:State Name="recievedRequestFromCabin" inTransitions="/448"/>
  <fiacreMM:State Name="doorClosed"/>
  <fiacreMM:State Name="Wait" inTransitions="/449"/>
  <fiacreMM:State Name="Wait" outTransitions="/450"/>
  <fiacreMM:State Name="receiveRequestFromButtonEx"/>
  <fiacreMM:State Name="receiveRequestFromButtonEx"/>
  <fiacreMM:State Name="cabinMoved" inTransitions="/451"/>
  <fiacreMM:State Name="receiveRequestFromButtonEx"/>
  <fiacreMM:State Name="cabinBraked" inTransitions="/452"/>
  <fiacreMM:State Name="cabinArrived" outTransitions="/453"/>
  <fiacreMM:State Name="cabinBraked"/>
  <fiacreMM:State Name="receiveRequestFromButtonEx" outTransitions="/454"/>
  <fiacreMM:State Name="cabinBraked"/>
  <fiacreMM:State Name="recievedRequestFromCabin" outTransitions="/455"/>
  <fiacreMM:State Name="cabinBraked"/>
  <fiacreMM:State Name="cabinBraked"/>
  <fiacreMM:State Name="doorOpened" inTransitions="/456"/>
  <fiacreMM:State Name="doorClosed" outTransitions="/457"/>
  <fiacreMM:State Name="recievedRequestFromCabin"/>
  <fiacreMM:State Name="recievedRequestFromCabin"/>
  <fiacreMM:State Name="cabinMoved" inTransitions="/458"/>
  <fiacreMM:State Name="recievedRequestFromCabin"/>
  <fiacreMM:State Name="cabinBraked" inTransitions="/459"/>
  <fiacreMM:State Name="doorOpened" outTransitions="/460"/>
  <fiacreMM:State Name="waitDoorClosed"/>
  <fiacreMM:State Name="waitDoorClosed"/>
  <fiacreMM:State Name="doorClosed" inTransitions="/461"/>
  <fiacreMM:State Name="cabinMoved" outTransitions="/113/@components.0/@instances.1/@transitions.0"/>
  <fiacreMM:State Name="cabinArrived" inTransitions="/113/@components.0/@instances.1/@transitions.0"/>
  <fiacreMM:State Name="cabinBraked" outTransitions="/113/@components.0/@instances.1/@transitions.1"/>
  <fiacreMM:State Name="doorOpened" inTransitions="/113/@components.0/@instances.1/@transitions.1"/>
  <fiacreMM:State Name="doorOpened" outTransitions="/113/@components.0/@instances.1/@transitions.2"/>
  <fiacreMM:State Name="doorClosed" inTransitions="/113/@components.0/@instances.1/@transitions.2"/>
  <fiacreMM:State Name="doorClosed" outTransitions="/113/@components.0/@instances.1/@transitions.3"/>
  <fiacreMM:State Name="recievedRequestFromCabin" inTransitions="/113/@components.0/@instances.1/@transitions.3"/>
  <fiacreMM:State Name="Wait" outTransitions="/113/@components.0/@instances.1/@transitions.4"/>
  <fiacreMM:State Name="receiveRequestFromButtonEx" inTransitions="/113/@components.0/@instances.1/@transitions.4"/>
  <fiacreMM:State Name="receiveRequestFromButtonEx" outTransitions="/113/@components.0/@instances.1/@transitions.5"/>
  <fiacreMM:State Name="cabinMoved" inTransitions="/113/@components.0/@instances.1/@transitions.5"/>
  <fiacreMM:State Name="cabinArrived" outTransitions="/113/@components.0/@instances.1/@transitions.6"/>
  <fiacreMM:State Name="cabinBraked" inTransitions="/113/@components.0/@instances.1/@transitions.6"/>
  <fiacreMM:State Name="receiveRequestFromButtonEx" outTransitions="/113/@components.0/@instances.1/@transitions.7"/>
  <fiacreMM:State Name="cabinBraked" inTransitions="/113/@components.0/@instances.1/@transitions.7"/>
  <fiacreMM:State Name="cabinMoved" outTransitions="/113/@components.0/@instances.1/@transitions.8"/>
  <fiacreMM:State Name="cabinMoved" inTransitions="/113/@components.0/@instances.1/@transitions.8"/>
  <fiacreMM:State Name="recievedRequestFromCabin" outTransitions="/113/@components.0/@instances.1/@transitions.9"/>
  <fiacreMM:State Name="cabinMoved" inTransitions="/113/@components.0/@instances.1/@transitions.9"/>
  <fiacreMM:State Name="recievedRequestFromCabin" outTransitions="/113/@components.0/@instances.1/@transitions.10"/>
  <fiacreMM:State Name="cabinBraked" inTransitions="/113/@components.0/@instances.1/@transitions.10"/>
  <fiacreMM:State Name="doorClosed" outTransitions="/113/@components.0/@instances.1/@transitions.11"/>
  <fiacreMM:State Name="Wait" inTransitions="/113/@components.0/@instances.1/@transitions.11"/>
  <fiacreMM:State Name="doorOpened" outTransitions="/113/@components.0/@instances.1/@transitions.12"/>
  <fiacreMM:State Name="waitDoorClosed" inTransitions="/113/@components.0/@instances.1/@transitions.12"/>
  <fiacreMM:State Name="waitDoorClosed" outTransitions="/113/@components.0/@instances.1/@transitions.13"/>
  <fiacreMM:State Name="doorClosed" inTransitions="/113/@components.0/@instances.1/@transitions.13"/>
  <fiacreMM:State Name="receiveCabinBrakedFromControllerSys" outTransitions="/463"/>
  <fiacreMM:State Name="Not_Going"/>
  <fiacreMM:State Name="Not_Going"/>
  <fiacreMM:State Name="Going_Up" inTransitions="/464"/>
  <fiacreMM:State Name="Not_Going"/>
  <fiacreMM:State Name="Going_Down" inTransitions="/465"/>
  <fiacreMM:State Name="Not_Going" outTransitions="/466"/>
  <fiacreMM:State Name="Going_Up"/>
  <fiacreMM:State Name="Going_Up"/>
  <fiacreMM:State Name="receiveCabinBrakedFromControllerSys" inTransitions="/467"/>
  <fiacreMM:State Name="Not_Going" outTransitions="/468"/>
  <fiacreMM:State Name="Going_Down"/>
  <fiacreMM:State Name="Going_Down"/>
  <fiacreMM:State Name="receiveCabinBrakedFromControllerSys" inTransitions="/469"/>
  <fiacreMM:State Name="Going_Up" outTransitions="/470"/>
  <fiacreMM:State Name="receiveCabinBrakedFromControllerSys"/>
  <fiacreMM:State Name="Going_Down" outTransitions="/471"/>
  <fiacreMM:State Name="receiveCabinBrakedFromControllerSys"/>
  <fiacreMM:State Name="receiveCabinBrakedFromControllerSys"/>
  <fiacreMM:State Name="Not_Going" inTransitions="/472"/>
  <fiacreMM:State Name="Not_Going" outTransitions="/113/@components.0/@instances.2/@transitions.0"/>
  <fiacreMM:State Name="Going_Up" inTransitions="/113/@components.0/@instances.2/@transitions.0"/>
  <fiacreMM:State Name="receiveCabinBrakedFromControllerSys" outTransitions="/113/@components.0/@instances.2/@transitions.1"/>
  <fiacreMM:State Name="Not_Going" inTransitions="/113/@components.0/@instances.2/@transitions.1"/>
  <fiacreMM:State Name="Not_Going" outTransitions="/113/@components.0/@instances.2/@transitions.2"/>
  <fiacreMM:State Name="Going_Down" inTransitions="/113/@components.0/@instances.2/@transitions.2"/>
  <fiacreMM:State Name="Going_Up" outTransitions="/113/@components.0/@instances.2/@transitions.3"/>
  <fiacreMM:State Name="receiveCabinBrakedFromControllerSys" inTransitions="/113/@components.0/@instances.2/@transitions.3"/>
  <fiacreMM:State Name="Going_Down" outTransitions="/113/@components.0/@instances.2/@transitions.4"/>
  <fiacreMM:State Name="receiveCabinBrakedFromControllerSys" inTransitions="/113/@components.0/@instances.2/@transitions.4"/>
  <fiacreMM:State Name="Down" outTransitions="/474"/>
  <fiacreMM:State Name="Stop"/>
  <fiacreMM:State Name="Up" outTransitions="/475"/>
  <fiacreMM:State Name="Stop"/>
  <fiacreMM:State Name="Stop"/>
  <fiacreMM:State Name="sentInfo" inTransitions="/476"/>
  <fiacreMM:State Name="Stop"/>
  <fiacreMM:State Name="Down" inTransitions="/477"/>
  <fiacreMM:State Name="Stop"/>
  <fiacreMM:State Name="Up" inTransitions="/478"/>
  <fiacreMM:State Name="sentInfo" outTransitions="/479"/>
  <fiacreMM:State Name="Down"/>
  <fiacreMM:State Name="Stop" outTransitions="/480"/>
  <fiacreMM:State Name="Down"/>
  <fiacreMM:State Name="Down"/>
  <fiacreMM:State Name="Stop" inTransitions="/481"/>
  <fiacreMM:State Name="Stop" outTransitions="/482"/>
  <fiacreMM:State Name="sentInfo"/>
  <fiacreMM:State Name="sentInfo"/>
  <fiacreMM:State Name="Down" inTransitions="/483"/>
  <fiacreMM:State Name="sentInfo"/>
  <fiacreMM:State Name="Up" inTransitions="/484"/>
  <fiacreMM:State Name="Stop" outTransitions="/485"/>
  <fiacreMM:State Name="Up"/>
  <fiacreMM:State Name="sentInfo" outTransitions="/486"/>
  <fiacreMM:State Name="Up"/>
  <fiacreMM:State Name="Up"/>
  <fiacreMM:State Name="Stop" inTransitions="/487"/>
  <fiacreMM:State Name="Down" outTransitions="/113/@components.0/@instances.3/@transitions.0"/>
  <fiacreMM:State Name="Stop" inTransitions="/113/@components.0/@instances.3/@transitions.0"/>
  <fiacreMM:State Name="Stop" outTransitions="/113/@components.0/@instances.3/@transitions.1"/>
  <fiacreMM:State Name="sentInfo" inTransitions="/113/@components.0/@instances.3/@transitions.1"/>
  <fiacreMM:State Name="sentInfo" outTransitions="/113/@components.0/@instances.3/@transitions.2"/>
  <fiacreMM:State Name="Down" inTransitions="/113/@components.0/@instances.3/@transitions.2"/>
  <fiacreMM:State Name="Stop" outTransitions="/113/@components.0/@instances.3/@transitions.3"/>
  <fiacreMM:State Name="Down" inTransitions="/113/@components.0/@instances.3/@transitions.3"/>
  <fiacreMM:State Name="Stop" outTransitions="/113/@components.0/@instances.3/@transitions.4"/>
  <fiacreMM:State Name="Up" inTransitions="/113/@components.0/@instances.3/@transitions.4"/>
  <fiacreMM:State Name="Up" outTransitions="/113/@components.0/@instances.3/@transitions.5"/>
  <fiacreMM:State Name="Stop" inTransitions="/113/@components.0/@instances.3/@transitions.5"/>
  <fiacreMM:State Name="sentInfo" outTransitions="/113/@components.0/@instances.3/@transitions.6"/>
  <fiacreMM:State Name="Up" inTransitions="/113/@components.0/@instances.3/@transitions.6"/>
  <fiacreMM:State Name="Sleep" outTransitions="/488"/>
  <fiacreMM:State Name="Open"/>
  <fiacreMM:State Name="Open"/>
  <fiacreMM:State Name="Closed" inTransitions="/489"/>
  <fiacreMM:State Name="Open" outTransitions="/490"/>
  <fiacreMM:State Name="Closed"/>
  <fiacreMM:State Name="Closed"/>
  <fiacreMM:State Name="Sleep" inTransitions="/491"/>
  <fiacreMM:State Name="Closed" outTransitions="/493"/>
  <fiacreMM:State Name="Sleep"/>
  <fiacreMM:State Name="Sleep"/>
  <fiacreMM:State Name="Open" inTransitions="/494"/>
  <fiacreMM:State Name="Sleep" outTransitions="/113/@components.0/@instances.4/@transitions.0"/>
  <fiacreMM:State Name="Open" inTransitions="/113/@components.0/@instances.4/@transitions.0"/>
  <fiacreMM:State Name="Open" outTransitions="/113/@components.0/@instances.4/@transitions.1"/>
  <fiacreMM:State Name="Closed" inTransitions="/113/@components.0/@instances.4/@transitions.1"/>
  <fiacreMM:State Name="Closed" outTransitions="/113/@components.0/@instances.4/@transitions.2"/>
  <fiacreMM:State Name="Sleep" inTransitions="/113/@components.0/@instances.4/@transitions.2"/>
  <fiacreMM:State Name="Detected" outTransitions="/495"/>
  <fiacreMM:State Name="Idle"/>
  <fiacreMM:State Name="Idle"/>
  <fiacreMM:State Name="Detecting" inTransitions="/497"/>
  <fiacreMM:State Name="Idle" outTransitions="/498"/>
  <fiacreMM:State Name="Detecting"/>
  <fiacreMM:State Name="Detecting" outTransitions="/499"/>
  <fiacreMM:State Name="Detecting"/>
  <fiacreMM:State Name="Detecting"/>
  <fiacreMM:State Name="Detected" inTransitions="/500"/>
  <fiacreMM:State Name="Detecting"/>
  <fiacreMM:State Name="Detecting" inTransitions="/501"/>
  <fiacreMM:State Name="Detecting" outTransitions="/502"/>
  <fiacreMM:State Name="Detected"/>
  <fiacreMM:State Name="Detected"/>
  <fiacreMM:State Name="Idle" inTransitions="/503"/>
  <fiacreMM:State Name="Idle" outTransitions="/113/@components.0/@instances.5/@transitions.0"/>
  <fiacreMM:State Name="Detecting" inTransitions="/113/@components.0/@instances.5/@transitions.0"/>
  <fiacreMM:State Name="Detecting" outTransitions="/113/@components.0/@instances.5/@transitions.1"/>
  <fiacreMM:State Name="Detected" inTransitions="/113/@components.0/@instances.5/@transitions.1"/>
  <fiacreMM:State Name="Detected" outTransitions="/113/@components.0/@instances.5/@transitions.2"/>
  <fiacreMM:State Name="Idle" inTransitions="/113/@components.0/@instances.5/@transitions.2"/>
  <fiacreMM:State Name="Detecting" outTransitions="/113/@components.0/@instances.5/@transitions.3"/>
  <fiacreMM:State Name="Detecting" inTransitions="/113/@components.0/@instances.5/@transitions.3"/>
  <fiacreMM:State Name="Detected" outTransitions="/504"/>
  <fiacreMM:State Name="Idle"/>
  <fiacreMM:State Name="Idle"/>
  <fiacreMM:State Name="Detecting" inTransitions="/506"/>
  <fiacreMM:State Name="Idle" outTransitions="/507"/>
  <fiacreMM:State Name="Detecting"/>
  <fiacreMM:State Name="Detecting" outTransitions="/508"/>
  <fiacreMM:State Name="Detecting"/>
  <fiacreMM:State Name="Detecting"/>
  <fiacreMM:State Name="Detected" inTransitions="/509"/>
  <fiacreMM:State Name="Detecting"/>
  <fiacreMM:State Name="Detecting" inTransitions="/510"/>
  <fiacreMM:State Name="Detecting" outTransitions="/511"/>
  <fiacreMM:State Name="Detected"/>
  <fiacreMM:State Name="Detected"/>
  <fiacreMM:State Name="Idle" inTransitions="/512"/>
  <fiacreMM:State Name="Idle" outTransitions="/113/@components.0/@instances.6/@transitions.0"/>
  <fiacreMM:State Name="Detecting" inTransitions="/113/@components.0/@instances.6/@transitions.0"/>
  <fiacreMM:State Name="Detecting" outTransitions="/113/@components.0/@instances.6/@transitions.1"/>
  <fiacreMM:State Name="Detected" inTransitions="/113/@components.0/@instances.6/@transitions.1"/>
  <fiacreMM:State Name="Detected" outTransitions="/113/@components.0/@instances.6/@transitions.2"/>
  <fiacreMM:State Name="Idle" inTransitions="/113/@components.0/@instances.6/@transitions.2"/>
  <fiacreMM:State Name="Detecting" outTransitions="/113/@components.0/@instances.6/@transitions.3"/>
  <fiacreMM:State Name="Detecting" inTransitions="/113/@components.0/@instances.6/@transitions.3"/>
  <fiacreMM:State Name="Detected" outTransitions="/513"/>
  <fiacreMM:State Name="Idle"/>
  <fiacreMM:State Name="Idle"/>
  <fiacreMM:State Name="Detecting" inTransitions="/515"/>
  <fiacreMM:State Name="Idle" outTransitions="/516"/>
  <fiacreMM:State Name="Detecting"/>
  <fiacreMM:State Name="Detecting" outTransitions="/517"/>
  <fiacreMM:State Name="Detecting"/>
  <fiacreMM:State Name="Detecting"/>
  <fiacreMM:State Name="Detected" inTransitions="/518"/>
  <fiacreMM:State Name="Detecting"/>
  <fiacreMM:State Name="Detecting" inTransitions="/519"/>
  <fiacreMM:State Name="Detecting" outTransitions="/520"/>
  <fiacreMM:State Name="Detected"/>
  <fiacreMM:State Name="Detected"/>
  <fiacreMM:State Name="Idle" inTransitions="/521"/>
  <fiacreMM:State Name="Idle" outTransitions="/113/@components.0/@instances.7/@transitions.0"/>
  <fiacreMM:State Name="Detecting" inTransitions="/113/@components.0/@instances.7/@transitions.0"/>
  <fiacreMM:State Name="Detecting" outTransitions="/113/@components.0/@instances.7/@transitions.1"/>
  <fiacreMM:State Name="Detected" inTransitions="/113/@components.0/@instances.7/@transitions.1"/>
  <fiacreMM:State Name="Detected" outTransitions="/113/@components.0/@instances.7/@transitions.2"/>
  <fiacreMM:State Name="Idle" inTransitions="/113/@components.0/@instances.7/@transitions.2"/>
  <fiacreMM:State Name="Detecting" outTransitions="/113/@components.0/@instances.7/@transitions.3"/>
  <fiacreMM:State Name="Detecting" inTransitions="/113/@components.0/@instances.7/@transitions.3"/>
  <fiacreMM:State Name="Detected" outTransitions="/522"/>
  <fiacreMM:State Name="Idle"/>
  <fiacreMM:State Name="Idle"/>
  <fiacreMM:State Name="Detecting" inTransitions="/524"/>
  <fiacreMM:State Name="Idle" outTransitions="/525"/>
  <fiacreMM:State Name="Detecting"/>
  <fiacreMM:State Name="Detecting" outTransitions="/526"/>
  <fiacreMM:State Name="Detecting"/>
  <fiacreMM:State Name="Detecting"/>
  <fiacreMM:State Name="Detected" inTransitions="/527"/>
  <fiacreMM:State Name="Detecting"/>
  <fiacreMM:State Name="Detecting" inTransitions="/528"/>
  <fiacreMM:State Name="Detecting" outTransitions="/529"/>
  <fiacreMM:State Name="Detected"/>
  <fiacreMM:State Name="Detected"/>
  <fiacreMM:State Name="Idle" inTransitions="/530"/>
  <fiacreMM:State Name="Idle" outTransitions="/113/@components.0/@instances.8/@transitions.0"/>
  <fiacreMM:State Name="Detecting" inTransitions="/113/@components.0/@instances.8/@transitions.0"/>
  <fiacreMM:State Name="Detecting" outTransitions="/113/@components.0/@instances.8/@transitions.1"/>
  <fiacreMM:State Name="Detected" inTransitions="/113/@components.0/@instances.8/@transitions.1"/>
  <fiacreMM:State Name="Detected" outTransitions="/113/@components.0/@instances.8/@transitions.2"/>
  <fiacreMM:State Name="Idle" inTransitions="/113/@components.0/@instances.8/@transitions.2"/>
  <fiacreMM:State Name="Detecting" outTransitions="/113/@components.0/@instances.8/@transitions.3"/>
  <fiacreMM:State Name="Detecting" inTransitions="/113/@components.0/@instances.8/@transitions.3"/>
  <fiacreMM:State Name="Detected" outTransitions="/531"/>
  <fiacreMM:State Name="Idle"/>
  <fiacreMM:State Name="Idle"/>
  <fiacreMM:State Name="Detecting" inTransitions="/533"/>
  <fiacreMM:State Name="Idle" outTransitions="/534"/>
  <fiacreMM:State Name="Detecting"/>
  <fiacreMM:State Name="Detecting" outTransitions="/535"/>
  <fiacreMM:State Name="Detecting"/>
  <fiacreMM:State Name="Detecting"/>
  <fiacreMM:State Name="Detected" inTransitions="/536"/>
  <fiacreMM:State Name="Detecting"/>
  <fiacreMM:State Name="Detecting" inTransitions="/537"/>
  <fiacreMM:State Name="Detecting" outTransitions="/538"/>
  <fiacreMM:State Name="Detected"/>
  <fiacreMM:State Name="Detected"/>
  <fiacreMM:State Name="Idle" inTransitions="/539"/>
  <fiacreMM:State Name="Idle" outTransitions="/113/@components.0/@instances.9/@transitions.0"/>
  <fiacreMM:State Name="Detecting" inTransitions="/113/@components.0/@instances.9/@transitions.0"/>
  <fiacreMM:State Name="Detecting" outTransitions="/113/@components.0/@instances.9/@transitions.1"/>
  <fiacreMM:State Name="Detected" inTransitions="/113/@components.0/@instances.9/@transitions.1"/>
  <fiacreMM:State Name="Detected" outTransitions="/113/@components.0/@instances.9/@transitions.2"/>
  <fiacreMM:State Name="Idle" inTransitions="/113/@components.0/@instances.9/@transitions.2"/>
  <fiacreMM:State Name="Detecting" outTransitions="/113/@components.0/@instances.9/@transitions.3"/>
  <fiacreMM:State Name="Detecting" inTransitions="/113/@components.0/@instances.9/@transitions.3"/>
  <fiacreMM:Transition target="/113/@components.0/@instances.0/@states.0" Name="0"/>
  <fiacreMM:Transition source="/114" target="/113/@components.0/@instances.0/@states.0" Name="1">
    <guard/>
    <trigger Body="arrive"/>
    <action codeFiacre="if (empty toButton_ex) then loop end;&#xD;&#xA;received := first toButton_ex;&#xD;&#xA;toButton_ex := dequeue(toButton_ex);&#xD;&#xA;if (received = arrive) then&#xD;&#xA;    to Off&#xD;&#xA;end"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/116" target="/113/@components.0/@instances.0/@states.0" Name="3">
    <guard/>
    <trigger Body="tm(5)"/>
    <action codeFiacre="wait[4,5];"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/113/@components.0/@instances.0/@states.0" target="/119" Name="2">
    <guard/>
    <trigger Body="Pressed">
      <arguments datatype="/2" Name="requestFloor"/>
    </trigger>
    <action Body="getP_btn_con().gen(new receiveFromButton_Ex(params.requestFloor));" codeFiacre="output ! requestFloor;&#xD;&#xA;"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/120" target="/113/@components.0/@instances.0/@states.1" Name="2">
    <guard/>
    <trigger Body="Pressed">
      <arguments datatype="/3" Name="requestFloor"/>
    </trigger>
    <action Body="getP_btn_con().gen(new receiveFromButton_Ex(params.requestFloor));" codeFiacre="output ! requestFloor;&#xD;&#xA;"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/113/@components.0/@instances.0/@states.1" target="/123" Name="1">
    <guard/>
    <trigger Body="arrive"/>
    <action codeFiacre="if (empty toButton_ex) then loop end;&#xD;&#xA;received := first toButton_ex;&#xD;&#xA;toButton_ex := dequeue(toButton_ex);&#xD;&#xA;if (received = arrive) then&#xD;&#xA;    to Off&#xD;&#xA;end"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/113/@components.0/@instances.0/@states.1" target="/125" Name="3">
    <guard/>
    <trigger Body="tm(5)"/>
    <action codeFiacre="wait[4,5];"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition target="/113/@components.0/@instances.1/@states.0" Name="0"/>
  <fiacreMM:Transition source="/132" target="/113/@components.0/@instances.1/@states.0" Name="12">
    <guard/>
    <trigger Body="doneTask"/>
    <action Body="loadedPassager=false;" codeFiacre="loadedPassager := false;"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/113/@components.0/@instances.1/@states.0" target="/135" Name="5">
    <guard/>
    <trigger Body="receiveFromButton_Ex">
      <arguments datatype="/7" Name="requestedFloor"/>
    </trigger>
    <action Body="exBtnFloor=params.requestedFloor;  &#xD;&#xA;destFloor=exBtnFloor;&#xD;&#xA;if (currentFloor &lt; exBtnFloor){&#xD;&#xA;&#x9;getP_con_win().gen(new goUp());   &#xD;&#xA;&#x9;upordown=1;  &#xD;&#xA;&#x9;sendToMeasureSensor(exBtnFloor);&#xD;&#xA;}else{&#xD;&#xA;&#x9;if (currentFloor == exBtnFloor) {&#xD;&#xA;&#x9;&#x9;//open the door         &#xD;&#xA;&#x9;&#x9;gen (new gotoOpenDoorDirectly());&#xD;&#xA;&#x9;}else{&#xD;&#xA;&#x9;&#x9;getP_con_win().gen(new goDown()); &#xD;&#xA;&#x9;&#x9;upordown=-1;  &#xD;&#xA;&#x9;&#x9;sendToMeasureSensor(exBtnFloor);&#xD;&#xA;&#x9;}&#xD;&#xA;}" codeFiacre="input ? exBtnFloor;     &#xD;&#xA;destFloor := exBtnFloor;&#xD;&#xA;if (currentFloor &lt; exBtnFloor) then&#xD;&#xA;            toWinch = enqueue(toWinch, goUp);&#xD;&#xA;&#x9;upordown := 1;  &#xD;&#xA;            case floor of &#xD;&#xA;&#x9;      0 -> toSensor = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA;&#x9;   |  1 ->  toSensor1 = enqueue(toSensor, toMeasure(currentFloor, floor));     &#x9;  &#xD;&#xA;&#x9;   |  2 ->  toSensor2 = enqueue(toSensor, toMeasure(currentFloor, floor));  &#x9; &#xD;&#xA;&#x9;   |  3 ->  toSensor3 = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA;&#x9;   |  4 ->  toSensor4 = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA;            end;&#xD;&#xA;else&#xD;&#xA;&#x9;if (currentFloor == exBtnFloor)  then      &#xD;&#xA;                        toControllerSys = enqueue(toControllerSys, gotoOpenDoorDirectly)&#xD;&#xA;&#x9;else&#xD;&#xA;                        toWinch = enqueue(toWinch, goDown)&#xD;&#xA;&#x9;            upordown := -1;  &#xD;&#xA;&#x9;&#x9;case floor of &#xD;&#xA;&#x9;                0 -> toSensor = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA;&#x9;             |  1 ->  toSensor1 = enqueue(toSensor, toMeasure(currentFloor, floor));     &#x9;  &#xD;&#xA;&#x9;             |  2 ->  toSensor2 = enqueue(toSensor, toMeasure(currentFloor, floor));  &#x9; &#xD;&#xA;&#x9;             |  3 ->  toSensor3 = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA;&#x9;             |  4 ->  toSensor4 = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA;                        end;&#xD;&#xA;&#x9;end;&#xD;&#xA;end;"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/136" target="/113/@components.0/@instances.1/@states.1" Name="6">
    <guard/>
    <trigger Body="receiveCabinMoved"/>
    <action Body="currentFloor+=upordown;   &#xD;&#xA;sendToMeasureSensor(destFloor);" codeFiacre="currentFloor := currentFloor+ upordown;   &#xD;&#xA;case floor of &#xD;&#xA;&#x9;      0 ->  toSensor = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA;&#x9;   |  1 ->  toSensor1 = enqueue(toSensor, toMeasure(currentFloor, floor));     &#x9;  &#xD;&#xA;&#x9;   |  2 ->  toSensor2 = enqueue(toSensor, toMeasure(currentFloor, floor));  &#x9; &#xD;&#xA;&#x9;   |  3 ->  toSensor3 = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA;&#x9;   |  4 ->  toSensor4 = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA;end;&#xD;&#xA;"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/138" target="/113/@components.0/@instances.1/@states.1" Name="9">
    <guard/>
    <trigger Body="continueToMove"/>
    <action Body="currentFloor+=upordown;   &#xD;&#xA;sendToMeasureSensor(destFloor);" codeFiacre="currentFloor := currentFloor + upordown;   &#xD;&#xA;sendToMeasureSensor(destFloor);&#xD;&#xA;case destFloor of &#xD;&#xA;&#x9;      0 -> toSensor = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA;&#x9;   |  1 ->  toSensor1 = enqueue(toSensor, toMeasure(currentFloor, floor));     &#x9;  &#xD;&#xA;&#x9;   |  2 ->  toSensor2 = enqueue(toSensor, toMeasure(currentFloor, floor));  &#x9; &#xD;&#xA;&#x9;   |  3 ->  toSensor3 = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA;&#x9;   |  4 ->  toSensor4 = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA; end;&#xD;&#xA;"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/140" target="/113/@components.0/@instances.1/@states.1" Name="10">
    <guard/>
    <trigger Body="receiveCabinMoved"/>
    <action Body="currentFloor+=upordown;   &#xD;&#xA;loadedPassager=true;        &#xD;&#xA;sendToMeasureSensor(destFloor);" codeFiacre="currentFloor := currentFloor+upordown;   &#xD;&#xA;loadedPassager := true;        &#xD;&#xA; case destFloor of &#xD;&#xA;&#x9;      0 -> toSensor = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA;&#x9;   |  1 ->  toSensor1 = enqueue(toSensor, toMeasure(currentFloor, floor));     &#x9;  &#xD;&#xA;&#x9;   |  2 ->  toSensor2 = enqueue(toSensor, toMeasure(currentFloor, floor));  &#x9; &#xD;&#xA;&#x9;   |  3 ->  toSensor3 = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA;&#x9;   |  4 ->  toSensor4 = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA;end;&#xD;&#xA;"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/113/@components.0/@instances.1/@states.1" target="/143" Name="1">
    <guard/>
    <trigger Body="detected"/>
    <action Body="sendStopToWinch()" codeFiacre="toWinch = enqueue(toWinch, stopFromController);&#xD;&#xA;"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/113/@components.0/@instances.1/@states.1" target="/145" Name="9">
    <guard/>
    <trigger Body="continueToMove"/>
    <action Body="currentFloor+=upordown;   &#xD;&#xA;sendToMeasureSensor(destFloor);" codeFiacre="currentFloor := currentFloor + upordown;   &#xD;&#xA;sendToMeasureSensor(destFloor);&#xD;&#xA;case destFloor of &#xD;&#xA;&#x9;      0 -> toSensor = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA;&#x9;   |  1 ->  toSensor1 = enqueue(toSensor, toMeasure(currentFloor, floor));     &#x9;  &#xD;&#xA;&#x9;   |  2 ->  toSensor2 = enqueue(toSensor, toMeasure(currentFloor, floor));  &#x9; &#xD;&#xA;&#x9;   |  3 ->  toSensor3 = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA;&#x9;   |  4 ->  toSensor4 = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA; end;&#xD;&#xA;"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/146" target="/113/@components.0/@instances.1/@states.2" Name="1">
    <guard/>
    <trigger Body="detected"/>
    <action Body="sendStopToWinch()" codeFiacre="toWinch = enqueue(toWinch, stopFromController);&#xD;&#xA;"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/113/@components.0/@instances.1/@states.2" target="/149" Name="7">
    <guard/>
    <trigger Body="braked"/>
    <action Body="sendToWinchToStop();" codeFiacre="toWinch = enqueue(toWinch, stop);&#xD;&#xA;"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/150" target="/113/@components.0/@instances.1/@states.3" Name="2">
    <guard/>
    <trigger Body="readyToOpenDoor"/>
    <action Body=" openDoor()" codeFiacre="toDoor := enqueue(toDoor, OpenDoor);&#xD;&#xA;toButton_ex := enqueue(toDoor, OpenDoor);&#xD;&#xA;"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/113/@components.0/@instances.1/@states.3" target="/153" Name="3">
    <guard/>
    <trigger Body="receiveFloorAndCloseDoor">
      <arguments datatype="/8" Name="requestedTargetFloor"/>
    </trigger>
    <action Body="closeDoor();&#xD;&#xA;targetFloor=params.requestedTargetFloor;    &#xD;&#xA;destFloor=targetFloor;" codeFiacre="toDoor := enqueue(toDoor, CloseDoor);&#xD;&#xA;targetFloor := params.requestedTargetFloor;    &#xD;&#xA;destFloor := targetFloor;"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/113/@components.0/@instances.1/@states.3" target="/155" Name="13">
    <guard Body="loadedPassager"/>
    <trigger/>
    <action Body="closeDoor();" codeFiacre="toDoor := enqueue(toDoor, CloseDoor);"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/156" target="/113/@components.0/@instances.1/@states.4" Name="3">
    <guard/>
    <trigger Body="receiveFloorAndCloseDoor">
      <arguments datatype="/9" Name="requestedTargetFloor"/>
    </trigger>
    <action Body="closeDoor();&#xD;&#xA;targetFloor=params.requestedTargetFloor;    &#xD;&#xA;destFloor=targetFloor;" codeFiacre="toDoor := enqueue(toDoor, CloseDoor);&#xD;&#xA;targetFloor := params.requestedTargetFloor;    &#xD;&#xA;destFloor := targetFloor;"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/158" target="/113/@components.0/@instances.1/@states.4" Name="14">
    <guard/>
    <trigger Body="readyToGo"/>
    <action Body="gen(new doneTask());" codeFiacre="toControllerSys := enqueue(toControllerSys, doneTask)"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/113/@components.0/@instances.1/@states.4" target="/161" Name="4">
    <guard/>
    <trigger Body="readyToOpenDoor"/>
    <action Body="if (currentFloor &lt; targetFloor){&#xD;&#xA;&#x9;getP_con_win().gen(new goUp());   &#xD;&#xA;&#x9;upordown=1; &#xD;&#xA;&#x9;&#xD;&#xA;&#x9;sendToMeasureSensor(targetFloor);&#xD;&#xA;}else{&#xD;&#xA;&#x9;if (currentFloor == targetFloor) {        &#xD;&#xA;&#x9;&#x9;gen (new gotoOpenDoorDirectly());&#xD;&#xA;&#x9;}else{&#xD;&#xA;&#x9;&#x9;getP_con_win().gen(new goDown()); &#xD;&#xA;&#x9;&#x9;upordown=-1;  &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;sendToMeasureSensor(targetFloor);&#xD;&#xA;&#x9;}&#xD;&#xA;}" codeFiacre="if (currentFloor &lt; targetFloor) then&#xD;&#xA;            toWinch := enqueue(toWinch, goUp); &#xD;&#xA;&#x9;upordown := 1; &#xD;&#xA;&#x9;sendToMeasureSensor(targetFloor);&#xD;&#xA;else&#xD;&#xA;&#x9;if (currentFloor = targetFloor) then       &#xD;&#xA;                        toControllerSys := enqueue(toControllerSys, gotoOpenDoorDirectly); &#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;toWinch := enqueue(toWinch, goDown); &#xD;&#xA;&#x9;&#x9;upordown := upordown-1;  &#xD;&#xA;&#x9;&#x9;case targetFloor of &#xD;&#xA;&#x9;                0 -> toSensor = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA;&#x9;             |  1 ->  toSensor1 = enqueue(toSensor, toMeasure(currentFloor, floor));     &#x9;  &#xD;&#xA;&#x9;             |  2 ->  toSensor2 = enqueue(toSensor, toMeasure(currentFloor, floor));  &#x9; &#xD;&#xA;&#x9;             |  3 ->  toSensor3 = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA;&#x9;             |  4 ->  toSensor4 = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA;                         end;&#xD;&#xA;&#x9;end;&#xD;&#xA;end;"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/113/@components.0/@instances.1/@states.4" target="/163" Name="12">
    <guard/>
    <trigger Body="doneTask"/>
    <action Body="loadedPassager=false;" codeFiacre="loadedPassager := false;"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/164" target="/113/@components.0/@instances.1/@states.5" Name="5">
    <guard/>
    <trigger Body="receiveFromButton_Ex">
      <arguments datatype="/10" Name="requestedFloor"/>
    </trigger>
    <action Body="exBtnFloor=params.requestedFloor;  &#xD;&#xA;destFloor=exBtnFloor;&#xD;&#xA;if (currentFloor &lt; exBtnFloor){&#xD;&#xA;&#x9;getP_con_win().gen(new goUp());   &#xD;&#xA;&#x9;upordown=1;  &#xD;&#xA;&#x9;sendToMeasureSensor(exBtnFloor);&#xD;&#xA;}else{&#xD;&#xA;&#x9;if (currentFloor == exBtnFloor) {&#xD;&#xA;&#x9;&#x9;//open the door         &#xD;&#xA;&#x9;&#x9;gen (new gotoOpenDoorDirectly());&#xD;&#xA;&#x9;}else{&#xD;&#xA;&#x9;&#x9;getP_con_win().gen(new goDown()); &#xD;&#xA;&#x9;&#x9;upordown=-1;  &#xD;&#xA;&#x9;&#x9;sendToMeasureSensor(exBtnFloor);&#xD;&#xA;&#x9;}&#xD;&#xA;}" codeFiacre="input ? exBtnFloor;     &#xD;&#xA;destFloor := exBtnFloor;&#xD;&#xA;if (currentFloor &lt; exBtnFloor) then&#xD;&#xA;            toWinch = enqueue(toWinch, goUp);&#xD;&#xA;&#x9;upordown := 1;  &#xD;&#xA;            case floor of &#xD;&#xA;&#x9;      0 -> toSensor = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA;&#x9;   |  1 ->  toSensor1 = enqueue(toSensor, toMeasure(currentFloor, floor));     &#x9;  &#xD;&#xA;&#x9;   |  2 ->  toSensor2 = enqueue(toSensor, toMeasure(currentFloor, floor));  &#x9; &#xD;&#xA;&#x9;   |  3 ->  toSensor3 = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA;&#x9;   |  4 ->  toSensor4 = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA;            end;&#xD;&#xA;else&#xD;&#xA;&#x9;if (currentFloor == exBtnFloor)  then      &#xD;&#xA;                        toControllerSys = enqueue(toControllerSys, gotoOpenDoorDirectly)&#xD;&#xA;&#x9;else&#xD;&#xA;                        toWinch = enqueue(toWinch, goDown)&#xD;&#xA;&#x9;            upordown := -1;  &#xD;&#xA;&#x9;&#x9;case floor of &#xD;&#xA;&#x9;                0 -> toSensor = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA;&#x9;             |  1 ->  toSensor1 = enqueue(toSensor, toMeasure(currentFloor, floor));     &#x9;  &#xD;&#xA;&#x9;             |  2 ->  toSensor2 = enqueue(toSensor, toMeasure(currentFloor, floor));  &#x9; &#xD;&#xA;&#x9;             |  3 ->  toSensor3 = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA;&#x9;             |  4 ->  toSensor4 = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA;                        end;&#xD;&#xA;&#x9;end;&#xD;&#xA;end;"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/113/@components.0/@instances.1/@states.5" target="/167" Name="6">
    <guard/>
    <trigger Body="receiveCabinMoved"/>
    <action Body="currentFloor+=upordown;   &#xD;&#xA;sendToMeasureSensor(destFloor);" codeFiacre="currentFloor := currentFloor+ upordown;   &#xD;&#xA;case floor of &#xD;&#xA;&#x9;      0 ->  toSensor = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA;&#x9;   |  1 ->  toSensor1 = enqueue(toSensor, toMeasure(currentFloor, floor));     &#x9;  &#xD;&#xA;&#x9;   |  2 ->  toSensor2 = enqueue(toSensor, toMeasure(currentFloor, floor));  &#x9; &#xD;&#xA;&#x9;   |  3 ->  toSensor3 = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA;&#x9;   |  4 ->  toSensor4 = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA;end;&#xD;&#xA;"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/113/@components.0/@instances.1/@states.5" target="/169" Name="8">
    <guard/>
    <trigger Body="gotoOpenDoorDirectly"/>
    <action Body="gen (new readyToOpenDoor());" codeFiacre="toControllerSys := enqueue(toControllerSys, readyToOpenDoor);&#xD;&#xA;"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/170" target="/113/@components.0/@instances.1/@states.6" Name="7">
    <guard/>
    <trigger Body="braked"/>
    <action Body="sendToWinchToStop();" codeFiacre="toWinch = enqueue(toWinch, stop);&#xD;&#xA;"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/172" target="/113/@components.0/@instances.1/@states.6" Name="8">
    <guard/>
    <trigger Body="gotoOpenDoorDirectly"/>
    <action Body="gen (new readyToOpenDoor());" codeFiacre="toControllerSys := enqueue(toControllerSys, readyToOpenDoor);&#xD;&#xA;"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/174" target="/113/@components.0/@instances.1/@states.6" Name="11">
    <guard/>
    <trigger Body="gotoOpenDoorDirectly"/>
    <action Body="gen(new readyToOpenDoor());" codeFiacre="toControllerSys := enqueue(toCOntrollerSys, readyToOpenDoor);"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/113/@components.0/@instances.1/@states.6" target="/177" Name="2">
    <guard/>
    <trigger Body="readyToOpenDoor"/>
    <action Body=" openDoor()" codeFiacre="toDoor := enqueue(toDoor, OpenDoor);&#xD;&#xA;toButton_ex := enqueue(toDoor, OpenDoor);&#xD;&#xA;"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/178" target="/113/@components.0/@instances.1/@states.7" Name="4">
    <guard/>
    <trigger Body="readyToOpenDoor"/>
    <action Body="if (currentFloor &lt; targetFloor){&#xD;&#xA;&#x9;getP_con_win().gen(new goUp());   &#xD;&#xA;&#x9;upordown=1; &#xD;&#xA;&#x9;&#xD;&#xA;&#x9;sendToMeasureSensor(targetFloor);&#xD;&#xA;}else{&#xD;&#xA;&#x9;if (currentFloor == targetFloor) {        &#xD;&#xA;&#x9;&#x9;gen (new gotoOpenDoorDirectly());&#xD;&#xA;&#x9;}else{&#xD;&#xA;&#x9;&#x9;getP_con_win().gen(new goDown()); &#xD;&#xA;&#x9;&#x9;upordown=-1;  &#xD;&#xA;&#x9;&#x9;&#xD;&#xA;&#x9;&#x9;sendToMeasureSensor(targetFloor);&#xD;&#xA;&#x9;}&#xD;&#xA;}" codeFiacre="if (currentFloor &lt; targetFloor) then&#xD;&#xA;            toWinch := enqueue(toWinch, goUp); &#xD;&#xA;&#x9;upordown := 1; &#xD;&#xA;&#x9;sendToMeasureSensor(targetFloor);&#xD;&#xA;else&#xD;&#xA;&#x9;if (currentFloor = targetFloor) then       &#xD;&#xA;                        toControllerSys := enqueue(toControllerSys, gotoOpenDoorDirectly); &#xD;&#xA;&#x9;else&#xD;&#xA;&#x9;&#x9;toWinch := enqueue(toWinch, goDown); &#xD;&#xA;&#x9;&#x9;upordown := upordown-1;  &#xD;&#xA;&#x9;&#x9;case targetFloor of &#xD;&#xA;&#x9;                0 -> toSensor = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA;&#x9;             |  1 ->  toSensor1 = enqueue(toSensor, toMeasure(currentFloor, floor));     &#x9;  &#xD;&#xA;&#x9;             |  2 ->  toSensor2 = enqueue(toSensor, toMeasure(currentFloor, floor));  &#x9; &#xD;&#xA;&#x9;             |  3 ->  toSensor3 = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA;&#x9;             |  4 ->  toSensor4 = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA;                         end;&#xD;&#xA;&#x9;end;&#xD;&#xA;end;"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/113/@components.0/@instances.1/@states.7" target="/181" Name="10">
    <guard/>
    <trigger Body="receiveCabinMoved"/>
    <action Body="currentFloor+=upordown;   &#xD;&#xA;loadedPassager=true;        &#xD;&#xA;sendToMeasureSensor(destFloor);" codeFiacre="currentFloor := currentFloor+upordown;   &#xD;&#xA;loadedPassager := true;        &#xD;&#xA; case destFloor of &#xD;&#xA;&#x9;      0 -> toSensor = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA;&#x9;   |  1 ->  toSensor1 = enqueue(toSensor, toMeasure(currentFloor, floor));     &#x9;  &#xD;&#xA;&#x9;   |  2 ->  toSensor2 = enqueue(toSensor, toMeasure(currentFloor, floor));  &#x9; &#xD;&#xA;&#x9;   |  3 ->  toSensor3 = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA;&#x9;   |  4 ->  toSensor4 = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA;end;&#xD;&#xA;"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/113/@components.0/@instances.1/@states.7" target="/183" Name="11">
    <guard/>
    <trigger Body="gotoOpenDoorDirectly"/>
    <action Body="gen(new readyToOpenDoor());" codeFiacre="toControllerSys := enqueue(toCOntrollerSys, readyToOpenDoor);"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/184" target="/113/@components.0/@instances.1/@states.8" Name="13">
    <guard Body="loadedPassager"/>
    <trigger/>
    <action Body="closeDoor();" codeFiacre="toDoor := enqueue(toDoor, CloseDoor);"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/113/@components.0/@instances.1/@states.8" target="/187" Name="14">
    <guard/>
    <trigger Body="readyToGo"/>
    <action Body="gen(new doneTask());" codeFiacre="toControllerSys := enqueue(toControllerSys, doneTask)"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition target="/113/@components.0/@instances.2/@states.0" Name="0"/>
  <fiacreMM:Transition source="/216" target="/113/@components.0/@instances.2/@states.0" Name="2">
    <guard/>
    <trigger Body="stop"/>
    <action Body="receiveStopFromController();" codeFiacre="toControllerSys := enqueue(toControllerSys,readyToOpenDoor);"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/113/@components.0/@instances.2/@states.0" target="/219" Name="1">
    <guard/>
    <trigger Body="goUp"/>
    <action Body="sendGoUpToCabin();" codeFiacre="toCabin := enqueue(toCabin moveCabinUp);"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/113/@components.0/@instances.2/@states.0" target="/221" Name="3">
    <guard/>
    <trigger Body="goDown"/>
    <action Body="sendGoDownToCabin();" codeFiacre="toCabin := enqueue (toCabin, moveCabinDown);"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/222" target="/113/@components.0/@instances.2/@states.1" Name="1">
    <guard/>
    <trigger Body="goUp"/>
    <action Body="sendGoUpToCabin();" codeFiacre="toCabin := enqueue(toCabin moveCabinUp);"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/113/@components.0/@instances.2/@states.1" target="/225" Name="4">
    <guard/>
    <trigger Body="stopFromController"/>
    <action Body="sendBrakeToCabin();" codeFiacre="toCabin := enqueue(toCabin, braked);"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/226" target="/113/@components.0/@instances.2/@states.2" Name="3">
    <guard/>
    <trigger Body="goDown"/>
    <action Body="sendGoDownToCabin();" codeFiacre="toCabin := enqueue (toCabin, moveCabinDown);"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/113/@components.0/@instances.2/@states.2" target="/229" Name="5">
    <guard/>
    <trigger Body="stopFromController"/>
    <action Body="sendBrakeToCabin();" codeFiacre="toCabin := enqueue(toCabin,braked);"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/230" target="/113/@components.0/@instances.2/@states.3" Name="4">
    <guard/>
    <trigger Body="stopFromController"/>
    <action Body="sendBrakeToCabin();" codeFiacre="toCabin := enqueue(toCabin, braked);"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/232" target="/113/@components.0/@instances.2/@states.3" Name="5">
    <guard/>
    <trigger Body="stopFromController"/>
    <action Body="sendBrakeToCabin();" codeFiacre="toCabin := enqueue(toCabin,braked);"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/113/@components.0/@instances.2/@states.3" target="/235" Name="2">
    <guard/>
    <trigger Body="stop"/>
    <action Body="receiveStopFromController();" codeFiacre="toControllerSys := enqueue(toControllerSys,readyToOpenDoor);"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition target="/113/@components.0/@instances.3/@states.0" Name="0"/>
  <fiacreMM:Transition source="/246" target="/113/@components.0/@instances.3/@states.0" Name="1">
    <guard/>
    <trigger Body="braked"/>
    <action Body="sendCabinBrakedToController();" codeFiacre="toControllerSys := enqueue (toControllerSys, braked);&#xD;&#xA;"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/248" target="/113/@components.0/@instances.3/@states.0" Name="6">
    <guard/>
    <trigger Body="braked"/>
    <action Body="sendCabinBrakedToController();" codeFiacre="toControllerSys := enqueue(toControllerSys, braked);"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/113/@components.0/@instances.3/@states.0" target="/251" Name="2">
    <guard/>
    <trigger Body="sendFloorAndCloseDoor">
      <arguments datatype="/27" Name="targetFloor"/>
    </trigger>
    <action Body="getP_cab_con().gen (new receiveFloorAndCloseDoor(params.targetFloor));" codeFiacre="toControllerSys := enqueue(toControllerSys, receiveFloorAndCloseDoor(params.targetFloor));"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/113/@components.0/@instances.3/@states.0" target="/253" Name="4">
    <guard/>
    <trigger Body="moveCabinDown"/>
    <action Body="sendMovedDownToController();" codeFiacre="toControllerSys := enqueue(toControllerSys, receiveCabinMoved);&#xD;&#xA;"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/113/@components.0/@instances.3/@states.0" target="/255" Name="5">
    <guard/>
    <trigger Body="moveCabinUp"/>
    <action Body="sendMovedUpToController();" codeFiacre="toControllerSys := enqueue(toControllerSys, receiveCabinMoved );"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/256" target="/113/@components.0/@instances.3/@states.1" Name="3">
    <guard/>
    <trigger Body="moveCabinDown"/>
    <action Body="sendMovedDownToController();" codeFiacre="toControllerSys := enqueue (toControllerSys, receiveCabinMoved);"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/258" target="/113/@components.0/@instances.3/@states.1" Name="4">
    <guard/>
    <trigger Body="moveCabinDown"/>
    <action Body="sendMovedDownToController();" codeFiacre="toControllerSys := enqueue(toControllerSys, receiveCabinMoved);&#xD;&#xA;"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/113/@components.0/@instances.3/@states.1" target="/261" Name="1">
    <guard/>
    <trigger Body="braked"/>
    <action Body="sendCabinBrakedToController();" codeFiacre="toControllerSys := enqueue (toControllerSys, braked);&#xD;&#xA;"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/262" target="/113/@components.0/@instances.3/@states.2" Name="2">
    <guard/>
    <trigger Body="sendFloorAndCloseDoor">
      <arguments datatype="/28" Name="targetFloor"/>
    </trigger>
    <action Body="getP_cab_con().gen (new receiveFloorAndCloseDoor(params.targetFloor));" codeFiacre="toControllerSys := enqueue(toControllerSys, receiveFloorAndCloseDoor(params.targetFloor));"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/113/@components.0/@instances.3/@states.2" target="/265" Name="3">
    <guard/>
    <trigger Body="moveCabinDown"/>
    <action Body="sendMovedDownToController();" codeFiacre="toControllerSys := enqueue (toControllerSys, receiveCabinMoved);"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/113/@components.0/@instances.3/@states.2" target="/267" Name="7">
    <guard/>
    <trigger Body="moveCabinUp"/>
    <action Body="sendMovedUpToController();" codeFiacre="toControllerSys := enqueue(toControllerSys,  receiveCabinMoved );"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/268" target="/113/@components.0/@instances.3/@states.3" Name="5">
    <guard/>
    <trigger Body="moveCabinUp"/>
    <action Body="sendMovedUpToController();" codeFiacre="toControllerSys := enqueue(toControllerSys, receiveCabinMoved );"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/270" target="/113/@components.0/@instances.3/@states.3" Name="7">
    <guard/>
    <trigger Body="moveCabinUp"/>
    <action Body="sendMovedUpToController();" codeFiacre="toControllerSys := enqueue(toControllerSys,  receiveCabinMoved );"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/113/@components.0/@instances.3/@states.3" target="/273" Name="6">
    <guard/>
    <trigger Body="braked"/>
    <action Body="sendCabinBrakedToController();" codeFiacre="toControllerSys := enqueue(toControllerSys, braked);"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/288" target="/113/@components.0/@instances.4/@states.0" Name="1">
    <guard/>
    <trigger Body="OpenDoor"/>
    <action codeFiacre="if (empty toDoor) then loop end;&#xD;&#xA;received := first toDoor;&#xD;&#xA;toDoor := dequeue(toDoor);&#xD;&#xA;if (received = OpenDoor) then to Open end;"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/113/@components.0/@instances.4/@states.0" target="/291" Name="2">
    <guard/>
    <trigger Body="CloseDoor"/>
    <action codeFiacre="if (empty toDoor) then loop end;&#xD;&#xA;received := first toDoor;&#xD;&#xA;toDoor := dequeue(toDoor);&#xD;&#xA;if (received = CloseDoor) then to Closed end;"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/292" target="/113/@components.0/@instances.4/@states.1" Name="2">
    <guard/>
    <trigger Body="CloseDoor"/>
    <action codeFiacre="if (empty toDoor) then loop end;&#xD;&#xA;received := first toDoor;&#xD;&#xA;toDoor := dequeue(toDoor);&#xD;&#xA;if (received = CloseDoor) then to Closed end;"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/113/@components.0/@instances.4/@states.1" target="/295" Name="3">
    <guard/>
    <trigger/>
    <action Body="goSleep();" codeFiacre="toControllerSys := enqueue (toController, readyToGo);"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition target="/113/@components.0/@instances.4/@states.2" Name="0"/>
  <fiacreMM:Transition source="/296" target="/113/@components.0/@instances.4/@states.2" Name="3">
    <guard/>
    <trigger/>
    <action Body="goSleep();" codeFiacre="toControllerSys := enqueue (toController, readyToGo);"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/113/@components.0/@instances.4/@states.2" target="/299" Name="1">
    <guard/>
    <trigger Body="OpenDoor"/>
    <action codeFiacre="if (empty toDoor) then loop end;&#xD;&#xA;received := first toDoor;&#xD;&#xA;toDoor := dequeue(toDoor);&#xD;&#xA;if (received = OpenDoor) then to Open end;"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/306" target="/113/@components.0/@instances.5/@states.0" Name="2">
    <guard/>
    <trigger Body="tm(1)"/>
    <action codeFiacre="wait[1,2]"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition target="/113/@components.0/@instances.5/@states.0" Name="3"/>
  <fiacreMM:Transition source="/113/@components.0/@instances.5/@states.0" target="/309" Name="0">
    <guard/>
    <trigger Body="toMeasure">
      <arguments datatype="/35" Name="currentFloor"/>
      <arguments datatype="/36" Name="sensorFloor"/>
    </trigger>
    <action Body="floor=params.sensorFloor;&#xD;&#xA;cabinFloor=params.currentFloor;" codeFiacre="floor := params.sensorFloor;&#xD;&#xA;cabinFloor := params.currentFloor;"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/310" target="/113/@components.0/@instances.5/@states.1" Name="0">
    <guard/>
    <trigger Body="toMeasure">
      <arguments datatype="/37" Name="currentFloor"/>
      <arguments datatype="/38" Name="sensorFloor"/>
    </trigger>
    <action Body="floor=params.sensorFloor;&#xD;&#xA;cabinFloor=params.currentFloor;" codeFiacre="floor := params.sensorFloor;&#xD;&#xA;cabinFloor := params.currentFloor;"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/312" target="/113/@components.0/@instances.5/@states.1" Name="4">
    <guard/>
    <trigger Body="toMeasure">
      <arguments datatype="/39" Name="currentFloor"/>
      <arguments datatype="/40" Name="sensorFloor"/>
    </trigger>
    <action Body="cabinFloor=params.currentFloor; &#xD;&#xA;checkArrived();" codeFiacre="cabinFloor=params.currentFloor; &#xD;&#xA;if (floor = cabinFloor)  then&#xD;&#xA;            case sensorFloor of &#xD;&#xA;&#x9;      0 -> toSensor = enqueue(toSensor,cabinArrived);   &#xD;&#xA;&#x9;   |  1 ->  toSensor1 = enqueue(toSensor1, cabinArrived);     &#x9;  &#xD;&#xA;&#x9;   |  2 ->  toSensor2 = enqueue(toSensor2, cabinArrived);  &#x9; &#xD;&#xA;&#x9;   |  3 ->  toSensor3 = enqueue(toSensor3, cabinArrived);   &#xD;&#xA;&#x9;   |  4 ->  toSensor4 = enqueue(toSensor4, cabinArrived);   &#xD;&#xA;            end;&#xD;&#xA;else&#xD;&#xA;&#x9;wait[1,2];&#xD;&#xA;&#x9;case sensorFloor of &#xD;&#xA;&#x9;      0 -> toSensor = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA;&#x9;   |  1 ->  toSensor1 = enqueue(toSensor1, toMeasure(currentFloor, floor));     &#x9;  &#xD;&#xA;&#x9;   |  2 ->  toSensor2 = enqueue(toSensor2, toMeasure(currentFloor, floor));  &#x9; &#xD;&#xA;&#x9;   |  3 ->  toSensor3 = enqueue(toSensor3, toMeasure(currentFloor, floor));   &#xD;&#xA;&#x9;   |  4 ->  toSensor4 = enqueue(toSensor4, toMeasure(currentFloor, floor));   &#xD;&#xA;            end;&#xD;&#xA;end;"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/113/@components.0/@instances.5/@states.1" target="/315" Name="1">
    <guard/>
    <trigger Body="cabinArrived"/>
    <action Body="sendCabinArrived();" codeFiacre="toControllerSys := enqueue (toControllerSys, detected);"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/113/@components.0/@instances.5/@states.1" target="/317" Name="4">
    <guard/>
    <trigger Body="toMeasure">
      <arguments datatype="/41" Name="currentFloor"/>
      <arguments datatype="/42" Name="sensorFloor"/>
    </trigger>
    <action Body="cabinFloor=params.currentFloor; &#xD;&#xA;checkArrived();" codeFiacre="cabinFloor=params.currentFloor; &#xD;&#xA;if (floor = cabinFloor)  then&#xD;&#xA;            case sensorFloor of &#xD;&#xA;&#x9;      0 -> toSensor = enqueue(toSensor,cabinArrived);   &#xD;&#xA;&#x9;   |  1 ->  toSensor1 = enqueue(toSensor1, cabinArrived);     &#x9;  &#xD;&#xA;&#x9;   |  2 ->  toSensor2 = enqueue(toSensor2, cabinArrived);  &#x9; &#xD;&#xA;&#x9;   |  3 ->  toSensor3 = enqueue(toSensor3, cabinArrived);   &#xD;&#xA;&#x9;   |  4 ->  toSensor4 = enqueue(toSensor4, cabinArrived);   &#xD;&#xA;            end;&#xD;&#xA;else&#xD;&#xA;&#x9;wait[1,2];&#xD;&#xA;&#x9;case sensorFloor of &#xD;&#xA;&#x9;      0 -> toSensor = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA;&#x9;   |  1 ->  toSensor1 = enqueue(toSensor1, toMeasure(currentFloor, floor));     &#x9;  &#xD;&#xA;&#x9;   |  2 ->  toSensor2 = enqueue(toSensor2, toMeasure(currentFloor, floor));  &#x9; &#xD;&#xA;&#x9;   |  3 ->  toSensor3 = enqueue(toSensor3, toMeasure(currentFloor, floor));   &#xD;&#xA;&#x9;   |  4 ->  toSensor4 = enqueue(toSensor4, toMeasure(currentFloor, floor));   &#xD;&#xA;            end;&#xD;&#xA;end;"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/318" target="/113/@components.0/@instances.5/@states.2" Name="1">
    <guard/>
    <trigger Body="cabinArrived"/>
    <action Body="sendCabinArrived();" codeFiacre="toControllerSys := enqueue (toControllerSys, detected);"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/113/@components.0/@instances.5/@states.2" target="/321" Name="2">
    <guard/>
    <trigger Body="tm(1)"/>
    <action codeFiacre="wait[1,2]"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/330" target="/113/@components.0/@instances.6/@states.0" Name="2">
    <guard/>
    <trigger Body="tm(1)"/>
    <action codeFiacre="wait[1,2]"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition target="/113/@components.0/@instances.6/@states.0" Name="3"/>
  <fiacreMM:Transition source="/113/@components.0/@instances.6/@states.0" target="/333" Name="0">
    <guard/>
    <trigger Body="toMeasure">
      <arguments datatype="/51" Name="currentFloor"/>
      <arguments datatype="/52" Name="sensorFloor"/>
    </trigger>
    <action Body="floor=params.sensorFloor;&#xD;&#xA;cabinFloor=params.currentFloor;" codeFiacre="floor := params.sensorFloor;&#xD;&#xA;cabinFloor := params.currentFloor;"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/334" target="/113/@components.0/@instances.6/@states.1" Name="0">
    <guard/>
    <trigger Body="toMeasure">
      <arguments datatype="/53" Name="currentFloor"/>
      <arguments datatype="/54" Name="sensorFloor"/>
    </trigger>
    <action Body="floor=params.sensorFloor;&#xD;&#xA;cabinFloor=params.currentFloor;" codeFiacre="floor := params.sensorFloor;&#xD;&#xA;cabinFloor := params.currentFloor;"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/336" target="/113/@components.0/@instances.6/@states.1" Name="4">
    <guard/>
    <trigger Body="toMeasure">
      <arguments datatype="/55" Name="currentFloor"/>
      <arguments datatype="/56" Name="sensorFloor"/>
    </trigger>
    <action Body="cabinFloor=params.currentFloor; &#xD;&#xA;checkArrived();" codeFiacre="cabinFloor=params.currentFloor; &#xD;&#xA;if (floor = cabinFloor)  then&#xD;&#xA;            case sensorFloor of &#xD;&#xA;&#x9;      0 -> toSensor = enqueue(toSensor,cabinArrived);   &#xD;&#xA;&#x9;   |  1 ->  toSensor1 = enqueue(toSensor1, cabinArrived);     &#x9;  &#xD;&#xA;&#x9;   |  2 ->  toSensor2 = enqueue(toSensor2, cabinArrived);  &#x9; &#xD;&#xA;&#x9;   |  3 ->  toSensor3 = enqueue(toSensor3, cabinArrived);   &#xD;&#xA;&#x9;   |  4 ->  toSensor4 = enqueue(toSensor4, cabinArrived);   &#xD;&#xA;            end;&#xD;&#xA;else&#xD;&#xA;&#x9;wait[1,2];&#xD;&#xA;&#x9;case sensorFloor of &#xD;&#xA;&#x9;      0 -> toSensor = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA;&#x9;   |  1 ->  toSensor1 = enqueue(toSensor1, toMeasure(currentFloor, floor));     &#x9;  &#xD;&#xA;&#x9;   |  2 ->  toSensor2 = enqueue(toSensor2, toMeasure(currentFloor, floor));  &#x9; &#xD;&#xA;&#x9;   |  3 ->  toSensor3 = enqueue(toSensor3, toMeasure(currentFloor, floor));   &#xD;&#xA;&#x9;   |  4 ->  toSensor4 = enqueue(toSensor4, toMeasure(currentFloor, floor));   &#xD;&#xA;            end;&#xD;&#xA;end;"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/113/@components.0/@instances.6/@states.1" target="/339" Name="1">
    <guard/>
    <trigger Body="cabinArrived"/>
    <action Body="sendCabinArrived();" codeFiacre="toControllerSys := enqueue (toControllerSys, detected);"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/113/@components.0/@instances.6/@states.1" target="/341" Name="4">
    <guard/>
    <trigger Body="toMeasure">
      <arguments datatype="/57" Name="currentFloor"/>
      <arguments datatype="/58" Name="sensorFloor"/>
    </trigger>
    <action Body="cabinFloor=params.currentFloor; &#xD;&#xA;checkArrived();" codeFiacre="cabinFloor=params.currentFloor; &#xD;&#xA;if (floor = cabinFloor)  then&#xD;&#xA;            case sensorFloor of &#xD;&#xA;&#x9;      0 -> toSensor = enqueue(toSensor,cabinArrived);   &#xD;&#xA;&#x9;   |  1 ->  toSensor1 = enqueue(toSensor1, cabinArrived);     &#x9;  &#xD;&#xA;&#x9;   |  2 ->  toSensor2 = enqueue(toSensor2, cabinArrived);  &#x9; &#xD;&#xA;&#x9;   |  3 ->  toSensor3 = enqueue(toSensor3, cabinArrived);   &#xD;&#xA;&#x9;   |  4 ->  toSensor4 = enqueue(toSensor4, cabinArrived);   &#xD;&#xA;            end;&#xD;&#xA;else&#xD;&#xA;&#x9;wait[1,2];&#xD;&#xA;&#x9;case sensorFloor of &#xD;&#xA;&#x9;      0 -> toSensor = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA;&#x9;   |  1 ->  toSensor1 = enqueue(toSensor1, toMeasure(currentFloor, floor));     &#x9;  &#xD;&#xA;&#x9;   |  2 ->  toSensor2 = enqueue(toSensor2, toMeasure(currentFloor, floor));  &#x9; &#xD;&#xA;&#x9;   |  3 ->  toSensor3 = enqueue(toSensor3, toMeasure(currentFloor, floor));   &#xD;&#xA;&#x9;   |  4 ->  toSensor4 = enqueue(toSensor4, toMeasure(currentFloor, floor));   &#xD;&#xA;            end;&#xD;&#xA;end;"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/342" target="/113/@components.0/@instances.6/@states.2" Name="1">
    <guard/>
    <trigger Body="cabinArrived"/>
    <action Body="sendCabinArrived();" codeFiacre="toControllerSys := enqueue (toControllerSys, detected);"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/113/@components.0/@instances.6/@states.2" target="/345" Name="2">
    <guard/>
    <trigger Body="tm(1)"/>
    <action codeFiacre="wait[1,2]"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/354" target="/113/@components.0/@instances.7/@states.0" Name="2">
    <guard/>
    <trigger Body="tm(1)"/>
    <action codeFiacre="wait[1,2]"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition target="/113/@components.0/@instances.7/@states.0" Name="3"/>
  <fiacreMM:Transition source="/113/@components.0/@instances.7/@states.0" target="/357" Name="0">
    <guard/>
    <trigger Body="toMeasure">
      <arguments datatype="/67" Name="currentFloor"/>
      <arguments datatype="/68" Name="sensorFloor"/>
    </trigger>
    <action Body="floor=params.sensorFloor;&#xD;&#xA;cabinFloor=params.currentFloor;" codeFiacre="floor := params.sensorFloor;&#xD;&#xA;cabinFloor := params.currentFloor;"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/358" target="/113/@components.0/@instances.7/@states.1" Name="0">
    <guard/>
    <trigger Body="toMeasure">
      <arguments datatype="/69" Name="currentFloor"/>
      <arguments datatype="/70" Name="sensorFloor"/>
    </trigger>
    <action Body="floor=params.sensorFloor;&#xD;&#xA;cabinFloor=params.currentFloor;" codeFiacre="floor := params.sensorFloor;&#xD;&#xA;cabinFloor := params.currentFloor;"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/360" target="/113/@components.0/@instances.7/@states.1" Name="4">
    <guard/>
    <trigger Body="toMeasure">
      <arguments datatype="/71" Name="currentFloor"/>
      <arguments datatype="/72" Name="sensorFloor"/>
    </trigger>
    <action Body="cabinFloor=params.currentFloor; &#xD;&#xA;checkArrived();" codeFiacre="cabinFloor=params.currentFloor; &#xD;&#xA;if (floor = cabinFloor)  then&#xD;&#xA;            case sensorFloor of &#xD;&#xA;&#x9;      0 -> toSensor = enqueue(toSensor,cabinArrived);   &#xD;&#xA;&#x9;   |  1 ->  toSensor1 = enqueue(toSensor1, cabinArrived);     &#x9;  &#xD;&#xA;&#x9;   |  2 ->  toSensor2 = enqueue(toSensor2, cabinArrived);  &#x9; &#xD;&#xA;&#x9;   |  3 ->  toSensor3 = enqueue(toSensor3, cabinArrived);   &#xD;&#xA;&#x9;   |  4 ->  toSensor4 = enqueue(toSensor4, cabinArrived);   &#xD;&#xA;            end;&#xD;&#xA;else&#xD;&#xA;&#x9;wait[1,2];&#xD;&#xA;&#x9;case sensorFloor of &#xD;&#xA;&#x9;      0 -> toSensor = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA;&#x9;   |  1 ->  toSensor1 = enqueue(toSensor1, toMeasure(currentFloor, floor));     &#x9;  &#xD;&#xA;&#x9;   |  2 ->  toSensor2 = enqueue(toSensor2, toMeasure(currentFloor, floor));  &#x9; &#xD;&#xA;&#x9;   |  3 ->  toSensor3 = enqueue(toSensor3, toMeasure(currentFloor, floor));   &#xD;&#xA;&#x9;   |  4 ->  toSensor4 = enqueue(toSensor4, toMeasure(currentFloor, floor));   &#xD;&#xA;            end;&#xD;&#xA;end;"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/113/@components.0/@instances.7/@states.1" target="/363" Name="1">
    <guard/>
    <trigger Body="cabinArrived"/>
    <action Body="sendCabinArrived();" codeFiacre="toControllerSys := enqueue (toControllerSys, detected);"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/113/@components.0/@instances.7/@states.1" target="/365" Name="4">
    <guard/>
    <trigger Body="toMeasure">
      <arguments datatype="/73" Name="currentFloor"/>
      <arguments datatype="/74" Name="sensorFloor"/>
    </trigger>
    <action Body="cabinFloor=params.currentFloor; &#xD;&#xA;checkArrived();" codeFiacre="cabinFloor=params.currentFloor; &#xD;&#xA;if (floor = cabinFloor)  then&#xD;&#xA;            case sensorFloor of &#xD;&#xA;&#x9;      0 -> toSensor = enqueue(toSensor,cabinArrived);   &#xD;&#xA;&#x9;   |  1 ->  toSensor1 = enqueue(toSensor1, cabinArrived);     &#x9;  &#xD;&#xA;&#x9;   |  2 ->  toSensor2 = enqueue(toSensor2, cabinArrived);  &#x9; &#xD;&#xA;&#x9;   |  3 ->  toSensor3 = enqueue(toSensor3, cabinArrived);   &#xD;&#xA;&#x9;   |  4 ->  toSensor4 = enqueue(toSensor4, cabinArrived);   &#xD;&#xA;            end;&#xD;&#xA;else&#xD;&#xA;&#x9;wait[1,2];&#xD;&#xA;&#x9;case sensorFloor of &#xD;&#xA;&#x9;      0 -> toSensor = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA;&#x9;   |  1 ->  toSensor1 = enqueue(toSensor1, toMeasure(currentFloor, floor));     &#x9;  &#xD;&#xA;&#x9;   |  2 ->  toSensor2 = enqueue(toSensor2, toMeasure(currentFloor, floor));  &#x9; &#xD;&#xA;&#x9;   |  3 ->  toSensor3 = enqueue(toSensor3, toMeasure(currentFloor, floor));   &#xD;&#xA;&#x9;   |  4 ->  toSensor4 = enqueue(toSensor4, toMeasure(currentFloor, floor));   &#xD;&#xA;            end;&#xD;&#xA;end;"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/366" target="/113/@components.0/@instances.7/@states.2" Name="1">
    <guard/>
    <trigger Body="cabinArrived"/>
    <action Body="sendCabinArrived();" codeFiacre="toControllerSys := enqueue (toControllerSys, detected);"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/113/@components.0/@instances.7/@states.2" target="/369" Name="2">
    <guard/>
    <trigger Body="tm(1)"/>
    <action codeFiacre="wait[1,2]"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/378" target="/113/@components.0/@instances.8/@states.0" Name="2">
    <guard/>
    <trigger Body="tm(1)"/>
    <action codeFiacre="wait[1,2]"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition target="/113/@components.0/@instances.8/@states.0" Name="3"/>
  <fiacreMM:Transition source="/113/@components.0/@instances.8/@states.0" target="/381" Name="0">
    <guard/>
    <trigger Body="toMeasure">
      <arguments datatype="/83" Name="currentFloor"/>
      <arguments datatype="/84" Name="sensorFloor"/>
    </trigger>
    <action Body="floor=params.sensorFloor;&#xD;&#xA;cabinFloor=params.currentFloor;" codeFiacre="floor := params.sensorFloor;&#xD;&#xA;cabinFloor := params.currentFloor;"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/382" target="/113/@components.0/@instances.8/@states.1" Name="0">
    <guard/>
    <trigger Body="toMeasure">
      <arguments datatype="/85" Name="currentFloor"/>
      <arguments datatype="/86" Name="sensorFloor"/>
    </trigger>
    <action Body="floor=params.sensorFloor;&#xD;&#xA;cabinFloor=params.currentFloor;" codeFiacre="floor := params.sensorFloor;&#xD;&#xA;cabinFloor := params.currentFloor;"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/384" target="/113/@components.0/@instances.8/@states.1" Name="4">
    <guard/>
    <trigger Body="toMeasure">
      <arguments datatype="/87" Name="currentFloor"/>
      <arguments datatype="/88" Name="sensorFloor"/>
    </trigger>
    <action Body="cabinFloor=params.currentFloor; &#xD;&#xA;checkArrived();" codeFiacre="cabinFloor=params.currentFloor; &#xD;&#xA;if (floor = cabinFloor)  then&#xD;&#xA;            case sensorFloor of &#xD;&#xA;&#x9;      0 -> toSensor = enqueue(toSensor,cabinArrived);   &#xD;&#xA;&#x9;   |  1 ->  toSensor1 = enqueue(toSensor1, cabinArrived);     &#x9;  &#xD;&#xA;&#x9;   |  2 ->  toSensor2 = enqueue(toSensor2, cabinArrived);  &#x9; &#xD;&#xA;&#x9;   |  3 ->  toSensor3 = enqueue(toSensor3, cabinArrived);   &#xD;&#xA;&#x9;   |  4 ->  toSensor4 = enqueue(toSensor4, cabinArrived);   &#xD;&#xA;            end;&#xD;&#xA;else&#xD;&#xA;&#x9;wait[1,2];&#xD;&#xA;&#x9;case sensorFloor of &#xD;&#xA;&#x9;      0 -> toSensor = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA;&#x9;   |  1 ->  toSensor1 = enqueue(toSensor1, toMeasure(currentFloor, floor));     &#x9;  &#xD;&#xA;&#x9;   |  2 ->  toSensor2 = enqueue(toSensor2, toMeasure(currentFloor, floor));  &#x9; &#xD;&#xA;&#x9;   |  3 ->  toSensor3 = enqueue(toSensor3, toMeasure(currentFloor, floor));   &#xD;&#xA;&#x9;   |  4 ->  toSensor4 = enqueue(toSensor4, toMeasure(currentFloor, floor));   &#xD;&#xA;            end;&#xD;&#xA;end;"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/113/@components.0/@instances.8/@states.1" target="/387" Name="1">
    <guard/>
    <trigger Body="cabinArrived"/>
    <action Body="sendCabinArrived();" codeFiacre="toControllerSys := enqueue (toControllerSys, detected);"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/113/@components.0/@instances.8/@states.1" target="/389" Name="4">
    <guard/>
    <trigger Body="toMeasure">
      <arguments datatype="/89" Name="currentFloor"/>
      <arguments datatype="/90" Name="sensorFloor"/>
    </trigger>
    <action Body="cabinFloor=params.currentFloor; &#xD;&#xA;checkArrived();" codeFiacre="cabinFloor=params.currentFloor; &#xD;&#xA;if (floor = cabinFloor)  then&#xD;&#xA;            case sensorFloor of &#xD;&#xA;&#x9;      0 -> toSensor = enqueue(toSensor,cabinArrived);   &#xD;&#xA;&#x9;   |  1 ->  toSensor1 = enqueue(toSensor1, cabinArrived);     &#x9;  &#xD;&#xA;&#x9;   |  2 ->  toSensor2 = enqueue(toSensor2, cabinArrived);  &#x9; &#xD;&#xA;&#x9;   |  3 ->  toSensor3 = enqueue(toSensor3, cabinArrived);   &#xD;&#xA;&#x9;   |  4 ->  toSensor4 = enqueue(toSensor4, cabinArrived);   &#xD;&#xA;            end;&#xD;&#xA;else&#xD;&#xA;&#x9;wait[1,2];&#xD;&#xA;&#x9;case sensorFloor of &#xD;&#xA;&#x9;      0 -> toSensor = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA;&#x9;   |  1 ->  toSensor1 = enqueue(toSensor1, toMeasure(currentFloor, floor));     &#x9;  &#xD;&#xA;&#x9;   |  2 ->  toSensor2 = enqueue(toSensor2, toMeasure(currentFloor, floor));  &#x9; &#xD;&#xA;&#x9;   |  3 ->  toSensor3 = enqueue(toSensor3, toMeasure(currentFloor, floor));   &#xD;&#xA;&#x9;   |  4 ->  toSensor4 = enqueue(toSensor4, toMeasure(currentFloor, floor));   &#xD;&#xA;            end;&#xD;&#xA;end;"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/390" target="/113/@components.0/@instances.8/@states.2" Name="1">
    <guard/>
    <trigger Body="cabinArrived"/>
    <action Body="sendCabinArrived();" codeFiacre="toControllerSys := enqueue (toControllerSys, detected);"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/113/@components.0/@instances.8/@states.2" target="/393" Name="2">
    <guard/>
    <trigger Body="tm(1)"/>
    <action codeFiacre="wait[1,2]"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/402" target="/113/@components.0/@instances.9/@states.0" Name="2">
    <guard/>
    <trigger Body="tm(1)"/>
    <action codeFiacre="wait[1,2]"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition target="/113/@components.0/@instances.9/@states.0" Name="3"/>
  <fiacreMM:Transition source="/113/@components.0/@instances.9/@states.0" target="/405" Name="0">
    <guard/>
    <trigger Body="toMeasure">
      <arguments datatype="/99" Name="currentFloor"/>
      <arguments datatype="/100" Name="sensorFloor"/>
    </trigger>
    <action Body="floor=params.sensorFloor;&#xD;&#xA;cabinFloor=params.currentFloor;" codeFiacre="floor := params.sensorFloor;&#xD;&#xA;cabinFloor := params.currentFloor;"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/406" target="/113/@components.0/@instances.9/@states.1" Name="0">
    <guard/>
    <trigger Body="toMeasure">
      <arguments datatype="/101" Name="currentFloor"/>
      <arguments datatype="/102" Name="sensorFloor"/>
    </trigger>
    <action Body="floor=params.sensorFloor;&#xD;&#xA;cabinFloor=params.currentFloor;" codeFiacre="floor := params.sensorFloor;&#xD;&#xA;cabinFloor := params.currentFloor;"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/408" target="/113/@components.0/@instances.9/@states.1" Name="4">
    <guard/>
    <trigger Body="toMeasure">
      <arguments datatype="/103" Name="currentFloor"/>
      <arguments datatype="/104" Name="sensorFloor"/>
    </trigger>
    <action Body="cabinFloor=params.currentFloor; &#xD;&#xA;checkArrived();" codeFiacre="cabinFloor=params.currentFloor; &#xD;&#xA;if (floor = cabinFloor)  then&#xD;&#xA;            case sensorFloor of &#xD;&#xA;&#x9;      0 -> toSensor = enqueue(toSensor,cabinArrived);   &#xD;&#xA;&#x9;   |  1 ->  toSensor1 = enqueue(toSensor1, cabinArrived);     &#x9;  &#xD;&#xA;&#x9;   |  2 ->  toSensor2 = enqueue(toSensor2, cabinArrived);  &#x9; &#xD;&#xA;&#x9;   |  3 ->  toSensor3 = enqueue(toSensor3, cabinArrived);   &#xD;&#xA;&#x9;   |  4 ->  toSensor4 = enqueue(toSensor4, cabinArrived);   &#xD;&#xA;            end;&#xD;&#xA;else&#xD;&#xA;&#x9;wait[1,2];&#xD;&#xA;&#x9;case sensorFloor of &#xD;&#xA;&#x9;      0 -> toSensor = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA;&#x9;   |  1 ->  toSensor1 = enqueue(toSensor1, toMeasure(currentFloor, floor));     &#x9;  &#xD;&#xA;&#x9;   |  2 ->  toSensor2 = enqueue(toSensor2, toMeasure(currentFloor, floor));  &#x9; &#xD;&#xA;&#x9;   |  3 ->  toSensor3 = enqueue(toSensor3, toMeasure(currentFloor, floor));   &#xD;&#xA;&#x9;   |  4 ->  toSensor4 = enqueue(toSensor4, toMeasure(currentFloor, floor));   &#xD;&#xA;            end;&#xD;&#xA;end;"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/113/@components.0/@instances.9/@states.1" target="/411" Name="1">
    <guard/>
    <trigger Body="cabinArrived"/>
    <action Body="sendCabinArrived();" codeFiacre="toControllerSys := enqueue (toControllerSys, detected);"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/113/@components.0/@instances.9/@states.1" target="/413" Name="4">
    <guard/>
    <trigger Body="toMeasure">
      <arguments datatype="/105" Name="currentFloor"/>
      <arguments datatype="/106" Name="sensorFloor"/>
    </trigger>
    <action Body="cabinFloor=params.currentFloor; &#xD;&#xA;checkArrived();" codeFiacre="cabinFloor=params.currentFloor; &#xD;&#xA;if (floor = cabinFloor)  then&#xD;&#xA;            case sensorFloor of &#xD;&#xA;&#x9;      0 -> toSensor = enqueue(toSensor,cabinArrived);   &#xD;&#xA;&#x9;   |  1 ->  toSensor1 = enqueue(toSensor1, cabinArrived);     &#x9;  &#xD;&#xA;&#x9;   |  2 ->  toSensor2 = enqueue(toSensor2, cabinArrived);  &#x9; &#xD;&#xA;&#x9;   |  3 ->  toSensor3 = enqueue(toSensor3, cabinArrived);   &#xD;&#xA;&#x9;   |  4 ->  toSensor4 = enqueue(toSensor4, cabinArrived);   &#xD;&#xA;            end;&#xD;&#xA;else&#xD;&#xA;&#x9;wait[1,2];&#xD;&#xA;&#x9;case sensorFloor of &#xD;&#xA;&#x9;      0 -> toSensor = enqueue(toSensor, toMeasure(currentFloor, floor));   &#xD;&#xA;&#x9;   |  1 ->  toSensor1 = enqueue(toSensor1, toMeasure(currentFloor, floor));     &#x9;  &#xD;&#xA;&#x9;   |  2 ->  toSensor2 = enqueue(toSensor2, toMeasure(currentFloor, floor));  &#x9; &#xD;&#xA;&#x9;   |  3 ->  toSensor3 = enqueue(toSensor3, toMeasure(currentFloor, floor));   &#xD;&#xA;&#x9;   |  4 ->  toSensor4 = enqueue(toSensor4, toMeasure(currentFloor, floor));   &#xD;&#xA;            end;&#xD;&#xA;end;"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/414" target="/113/@components.0/@instances.9/@states.2" Name="1">
    <guard/>
    <trigger Body="cabinArrived"/>
    <action Body="sendCabinArrived();" codeFiacre="toControllerSys := enqueue (toControllerSys, detected);"/>
  </fiacreMM:Transition>
  <fiacreMM:Transition source="/113/@components.0/@instances.9/@states.2" target="/417" Name="2">
    <guard/>
    <trigger Body="tm(1)"/>
    <action codeFiacre="wait[1,2]"/>
  </fiacreMM:Transition>
  <fiacreMM:Variable datatype="/0" Name="toButton_ex"/>
  <fiacreMM:Variable datatype="/1" processes="/113/@components.0/@instances.0" Name="toButton_ex"/>
  <fiacreMM:Variable datatype="/5" Name="toControllerSys"/>
  <fiacreMM:Variable datatype="/6" processes="/113/@components.0/@instances.1" Name="toControllerSys"/>
  <fiacreMM:Variable datatype="/13" processes="/113/@components.0/@instances.1" Name="exBtnFloor" initVal="-1"/>
  <fiacreMM:Variable datatype="/14" processes="/113/@components.0/@instances.1" Name="currentFloor" initVal="0"/>
  <fiacreMM:Variable datatype="/15" processes="/113/@components.0/@instances.1" Name="isBusy" initVal="false"/>
  <fiacreMM:Variable datatype="/16" processes="/113/@components.0/@instances.1" Name="upordown" initVal="0"/>
  <fiacreMM:Variable datatype="/17" processes="/113/@components.0/@instances.1" Name="targetFloor" initVal="-1"/>
  <fiacreMM:Variable datatype="/18" processes="/113/@components.0/@instances.1" Name="destFloor" initVal="-1"/>
  <fiacreMM:Variable datatype="/19" processes="/113/@components.0/@instances.1" Name="loadedPassager" initVal="false"/>
  <fiacreMM:Variable datatype="/20" Name="toWinch"/>
  <fiacreMM:Variable datatype="/21" processes="/113/@components.0/@instances.2" Name="toWinch"/>
  <fiacreMM:Variable datatype="/22" processes="/113/@components.0/@instances.2" Name="motor"/>
  <fiacreMM:Variable datatype="/23" processes="/113/@components.0/@instances.2" Name="frein"/>
  <fiacreMM:Variable datatype="/24" processes="/113/@components.0/@instances.2" Name="selector"/>
  <fiacreMM:Variable datatype="/25" Name="toCabin"/>
  <fiacreMM:Variable datatype="/26" processes="/113/@components.0/@instances.3" Name="toCabin"/>
  <fiacreMM:Variable datatype="/30" processes="/113/@components.0/@instances.3" Name="currentFloor" initVal="0"/>
  <fiacreMM:Variable datatype="/31" Name="toDoor"/>
  <fiacreMM:Variable datatype="/32" processes="/113/@components.0/@instances.4" Name="toDoor"/>
  <fiacreMM:Variable datatype="/33" Name="toSensor"/>
  <fiacreMM:Variable datatype="/34" processes="/113/@components.0/@instances.5" Name="toSensor"/>
  <fiacreMM:Variable datatype="/47" processes="/113/@components.0/@instances.5" Name="floor" initVal="-1"/>
  <fiacreMM:Variable datatype="/48" processes="/113/@components.0/@instances.5" Name="cabinFloor" initVal="-1"/>
  <fiacreMM:Variable datatype="/49" Name="toSensor"/>
  <fiacreMM:Variable datatype="/50" processes="/113/@components.0/@instances.6" Name="toSensor"/>
  <fiacreMM:Variable datatype="/63" processes="/113/@components.0/@instances.6" Name="floor" initVal="-1"/>
  <fiacreMM:Variable datatype="/64" processes="/113/@components.0/@instances.6" Name="cabinFloor" initVal="-1"/>
  <fiacreMM:Variable datatype="/65" Name="toSensor"/>
  <fiacreMM:Variable datatype="/66" processes="/113/@components.0/@instances.7" Name="toSensor"/>
  <fiacreMM:Variable datatype="/79" processes="/113/@components.0/@instances.7" Name="floor" initVal="-1"/>
  <fiacreMM:Variable datatype="/80" processes="/113/@components.0/@instances.7" Name="cabinFloor" initVal="-1"/>
  <fiacreMM:Variable datatype="/81" Name="toSensor"/>
  <fiacreMM:Variable datatype="/82" processes="/113/@components.0/@instances.8" Name="toSensor"/>
  <fiacreMM:Variable datatype="/95" processes="/113/@components.0/@instances.8" Name="floor" initVal="-1"/>
  <fiacreMM:Variable datatype="/96" processes="/113/@components.0/@instances.8" Name="cabinFloor" initVal="-1"/>
  <fiacreMM:Variable datatype="/97" Name="toSensor"/>
  <fiacreMM:Variable datatype="/98" processes="/113/@components.0/@instances.9" Name="toSensor"/>
  <fiacreMM:Variable datatype="/111" processes="/113/@components.0/@instances.9" Name="floor" initVal="-1"/>
  <fiacreMM:Variable datatype="/112" processes="/113/@components.0/@instances.9" Name="cabinFloor" initVal="-1"/>
</xmi:XMI>
