
	/*process*/
type Button_exEvents is union
	
		| Pressed
	
		| arrive
		| tm(5)
end

		type toButton_ex is queue 2 of Button_exEvents
	Process Button_ex [
					&requestFloor : int,
]

 (
					&requestFloor : int,
		)

	is
		states 
			Off,
			On
	init
		toButton_ex := ;
		to Off

	from Off
		Pressed
		output ! requestFloor;
		to On
	from On
		arrive
		
		to Off
		tm(5)
		
		to Off

type ControllerSysEvents is union
	
		| receiveFromButton_Ex
	
		| detected
		| continueToMove
	
		| braked
	
		| receiveFloorAndCloseDoor
		| 
	
		| readyToOpenDoor
		| doneTask
	
		| receiveCabinMoved
		| gotoOpenDoorDirectly
	
		| readyToOpenDoor
	
		| receiveCabinMoved
		| gotoOpenDoorDirectly
	
		| readyToGo
end

		type toControllerSys is queue 2 of ControllerSysEvents
	Process ControllerSys [
					&requestedTargetFloor : int,
					&requestedFloor : int,
]

 (
					&requestedTargetFloor : int,
					&requestedFloor : int,
		)

	is
		states 
			Wait,
			cabinMoved,
			cabinArrived,
			doorOpened,
			doorClosed,
			receiveRequestFromButtonEx,
			cabinBraked,
			recievedRequestFromCabin,
			waitDoorClosed
		var 
			toControllerSys,
			exBtnFloor,
			currentFloor,
			isBusy,
			upordown,
			targetFloor,
			destFloor
			loadedPassager
	init
		toControllerSys := ;
		exBtnFloor := -1;
		currentFloor := 0;
		isBusy := false;
		upordown := 0;
		targetFloor := -1;
		destFloor := -1;
		loadedPassager := false;
		to Wait

	from Wait
		receiveFromButton_Ex
		input ? exBtnFloor;     
destFloor := exBtnFloor;
if (currentFloor < exBtnFloor) then
	getP_con_win().gen(new goUp());   
	upordown := 1;  
	sendToMeasureSensor(exBtnFloor);
else
	if (currentFloor == exBtnFloor)  then      
		gen (new gotoOpenDoorDirectly());
	else
		getP_con_win().gen(new goDown()); 
		upordown := -1;  
		sendToMeasureSensor(exBtnFloor);
	end;
end;
		to receiveRequestFromButtonEx
	from cabinMoved
		detected
		
		to cabinArrived
		continueToMove
		
		to cabinMoved
	from cabinArrived
		braked
		
		to cabinBraked
	from doorOpened
		receiveFloorAndCloseDoor
		
		to doorClosed
		
		
		to waitDoorClosed
	from doorClosed
		readyToOpenDoor
		
		to recievedRequestFromCabin
		doneTask
		
		to Wait
	from receiveRequestFromButtonEx
		receiveCabinMoved
		
		to cabinMoved
		gotoOpenDoorDirectly
		
		to cabinBraked
	from cabinBraked
		readyToOpenDoor
		
		to doorOpened
	from recievedRequestFromCabin
		receiveCabinMoved
		
		to cabinMoved
		gotoOpenDoorDirectly
		
		to cabinBraked
	from waitDoorClosed
		readyToGo
		
		to doorClosed

type WinchEvents is union
	
		| goUp
		| goDown
	
		| stopFromController
	
		| stopFromController
	
		| stop
end

		type toWinch is queue 2 of WinchEvents
	Process Winch [
]

 (
		)

	is
		states 
			Not_Going,
			Going_Up,
			Going_Down,
			receiveCabinBrakedFromControllerSys
		var 
			toWinch,
			motor,
			frein
			selector
	init
		toWinch := ;
		motor := ;
		frein := ;
		selector := ;
		to Not_Going

	from Not_Going
		goUp
		getP_win_cab().gen(new moveCabinUp());
		to Going_Up
		goDown
		
		to Going_Down
	from Going_Up
		stopFromController
		
		to receiveCabinBrakedFromControllerSys
	from Going_Down
		stopFromController
		
		to receiveCabinBrakedFromControllerSys
	from receiveCabinBrakedFromControllerSys
		stop
		
		to Not_Going

type CabinEvents is union
	
		| sendFloorAndCloseDoor
		| moveCabinDown
		| moveCabinUp
	
		| braked
	
		| moveCabinDown
		| moveCabinUp
	
		| braked
end

		type toCabin is queue 2 of CabinEvents
	Process Cabin [
					&targetFloor : int,
]

 (
					&targetFloor : int,
		)

	is
		states 
			Stop,
			Down,
			sentInfo,
			Up
		var 
			toCabin
			currentFloor
	init
		toCabin := ;
		currentFloor := 0;
		to Stop

	from Stop
		sendFloorAndCloseDoor
		
		to sentInfo
		moveCabinDown
		
		to Down
		moveCabinUp
		
		to Up
	from Down
		braked
		
		to Stop
	from sentInfo
		moveCabinDown
		
		to Down
		moveCabinUp
		
		to Up
	from Up
		braked
		
		to Stop

type DoorEvents is union
	
		| CloseDoor
	
		| 
	
		| OpenDoor
end

		type toDoor is queue 2 of DoorEvents
	Process Door [
]

 (
		)

	is
		states 
			Open,
			Closed,
			Sleep
	init
		toDoor := ;
		to Sleep

	from Open
		CloseDoor
		
		to Closed
	from Closed
		
		
		to Sleep
	from Sleep
		OpenDoor
		
		to Open

type SensorEvents is union
	
		| toMeasure
	
		| cabinArrived
		| toMeasure
	
		| tm(1)
end

		type toSensor is queue 2 of SensorEvents
	Process Sensor [
					&currentFloor : int,
					&sensorFloor : int,
					&currentFloor : int,
					&sensorFloor : int,
]

 (
					&currentFloor : int,
					&sensorFloor : int,
					&currentFloor : int,
					&sensorFloor : int,
		)

	is
		states 
			Idle,
			Detecting,
			Detected
		var 
			toSensor,
			floor
			cabinFloor
	init
		toSensor := ;
		floor := -1;
		cabinFloor := -1;
		to Idle

	from Idle
		toMeasure
		
		to Detecting
	from Detecting
		cabinArrived
		
		to Detected
		toMeasure
		
		to Detecting
	from Detected
		tm(1)
		
		to Idle

type SensorEvents is union
	
		| toMeasure
	
		| cabinArrived
		| toMeasure
	
		| tm(1)
end

		type toSensor is queue 2 of SensorEvents
	Process Sensor [
					&currentFloor : int,
					&sensorFloor : int,
					&currentFloor : int,
					&sensorFloor : int,
]

 (
					&currentFloor : int,
					&sensorFloor : int,
					&currentFloor : int,
					&sensorFloor : int,
		)

	is
		states 
			Idle,
			Detecting,
			Detected
		var 
			toSensor,
			floor
			cabinFloor
	init
		toSensor := ;
		floor := -1;
		cabinFloor := -1;
		to Idle

	from Idle
		toMeasure
		
		to Detecting
	from Detecting
		cabinArrived
		
		to Detected
		toMeasure
		
		to Detecting
	from Detected
		tm(1)
		
		to Idle

type SensorEvents is union
	
		| toMeasure
	
		| cabinArrived
		| toMeasure
	
		| tm(1)
end

		type toSensor is queue 2 of SensorEvents
	Process Sensor [
					&currentFloor : int,
					&sensorFloor : int,
					&currentFloor : int,
					&sensorFloor : int,
]

 (
					&currentFloor : int,
					&sensorFloor : int,
					&currentFloor : int,
					&sensorFloor : int,
		)

	is
		states 
			Idle,
			Detecting,
			Detected
		var 
			toSensor,
			floor
			cabinFloor
	init
		toSensor := ;
		floor := -1;
		cabinFloor := -1;
		to Idle

	from Idle
		toMeasure
		
		to Detecting
	from Detecting
		cabinArrived
		
		to Detected
		toMeasure
		
		to Detecting
	from Detected
		tm(1)
		
		to Idle

type SensorEvents is union
	
		| toMeasure
	
		| cabinArrived
		| toMeasure
	
		| tm(1)
end

		type toSensor is queue 2 of SensorEvents
	Process Sensor [
					&currentFloor : int,
					&sensorFloor : int,
					&currentFloor : int,
					&sensorFloor : int,
]

 (
					&currentFloor : int,
					&sensorFloor : int,
					&currentFloor : int,
					&sensorFloor : int,
		)

	is
		states 
			Idle,
			Detecting,
			Detected
		var 
			toSensor,
			floor
			cabinFloor
	init
		toSensor := ;
		floor := -1;
		cabinFloor := -1;
		to Idle

	from Idle
		toMeasure
		
		to Detecting
	from Detecting
		cabinArrived
		
		to Detected
		toMeasure
		
		to Detecting
	from Detected
		tm(1)
		
		to Idle

type SensorEvents is union
	
		| toMeasure
	
		| cabinArrived
		| toMeasure
	
		| tm(1)
end

		type toSensor is queue 2 of SensorEvents
	Process Sensor [
					&currentFloor : int,
					&sensorFloor : int,
					&currentFloor : int,
					&sensorFloor : int,
]

 (
					&currentFloor : int,
					&sensorFloor : int,
					&currentFloor : int,
					&sensorFloor : int,
		)

	is
		states 
			Idle,
			Detecting,
			Detected
		var 
			toSensor,
			floor
			cabinFloor
	init
		toSensor := ;
		floor := -1;
		cabinFloor := -1;
		to Idle

	from Idle
		toMeasure
		
		to Detecting
	from Detecting
		cabinArrived
		
		to Detected
		toMeasure
		
		to Detecting
	from Detected
		tm(1)
		
		to Idle

	/*Component*/
	Component InstanceClsDiag is 
	par
	
	
			Button_ex,
			ControllerSys,
			Winch,
			Cabin,
			Door,
			Sensor,
			Sensor,
			Sensor,
			Sensor,
			Sensor
	

